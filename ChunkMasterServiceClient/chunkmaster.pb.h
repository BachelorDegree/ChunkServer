// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chunkmaster.proto

#ifndef PROTOBUF_INCLUDED_chunkmaster_2eproto
#define PROTOBUF_INCLUDED_chunkmaster_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_chunkmaster_2eproto 

namespace protobuf_chunkmaster_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[11];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_chunkmaster_2eproto
namespace chunkmaster {
class AllocateUploadSliceReq;
class AllocateUploadSliceReqDefaultTypeInternal;
extern AllocateUploadSliceReqDefaultTypeInternal _AllocateUploadSliceReq_default_instance_;
class AllocateUploadSliceRsp;
class AllocateUploadSliceRspDefaultTypeInternal;
extern AllocateUploadSliceRspDefaultTypeInternal _AllocateUploadSliceRsp_default_instance_;
class BatchGetPhysicalSlicesReq;
class BatchGetPhysicalSlicesReqDefaultTypeInternal;
extern BatchGetPhysicalSlicesReqDefaultTypeInternal _BatchGetPhysicalSlicesReq_default_instance_;
class BatchGetPhysicalSlicesRsp;
class BatchGetPhysicalSlicesRspDefaultTypeInternal;
extern BatchGetPhysicalSlicesRspDefaultTypeInternal _BatchGetPhysicalSlicesRsp_default_instance_;
class CalculateUploadSliceLengthsReq;
class CalculateUploadSliceLengthsReqDefaultTypeInternal;
extern CalculateUploadSliceLengthsReqDefaultTypeInternal _CalculateUploadSliceLengthsReq_default_instance_;
class CalculateUploadSliceLengthsRsp;
class CalculateUploadSliceLengthsRspDefaultTypeInternal;
extern CalculateUploadSliceLengthsRspDefaultTypeInternal _CalculateUploadSliceLengthsRsp_default_instance_;
class ChunkInformation;
class ChunkInformationDefaultTypeInternal;
extern ChunkInformationDefaultTypeInternal _ChunkInformation_default_instance_;
class FinishUploadSliceReq;
class FinishUploadSliceReqDefaultTypeInternal;
extern FinishUploadSliceReqDefaultTypeInternal _FinishUploadSliceReq_default_instance_;
class FinishUploadSliceRsp;
class FinishUploadSliceRspDefaultTypeInternal;
extern FinishUploadSliceRspDefaultTypeInternal _FinishUploadSliceRsp_default_instance_;
class ReportChunkInformationReq;
class ReportChunkInformationReqDefaultTypeInternal;
extern ReportChunkInformationReqDefaultTypeInternal _ReportChunkInformationReq_default_instance_;
class ReportChunkInformationRsp;
class ReportChunkInformationRspDefaultTypeInternal;
extern ReportChunkInformationRspDefaultTypeInternal _ReportChunkInformationRsp_default_instance_;
}  // namespace chunkmaster
namespace google {
namespace protobuf {
template<> ::chunkmaster::AllocateUploadSliceReq* Arena::CreateMaybeMessage<::chunkmaster::AllocateUploadSliceReq>(Arena*);
template<> ::chunkmaster::AllocateUploadSliceRsp* Arena::CreateMaybeMessage<::chunkmaster::AllocateUploadSliceRsp>(Arena*);
template<> ::chunkmaster::BatchGetPhysicalSlicesReq* Arena::CreateMaybeMessage<::chunkmaster::BatchGetPhysicalSlicesReq>(Arena*);
template<> ::chunkmaster::BatchGetPhysicalSlicesRsp* Arena::CreateMaybeMessage<::chunkmaster::BatchGetPhysicalSlicesRsp>(Arena*);
template<> ::chunkmaster::CalculateUploadSliceLengthsReq* Arena::CreateMaybeMessage<::chunkmaster::CalculateUploadSliceLengthsReq>(Arena*);
template<> ::chunkmaster::CalculateUploadSliceLengthsRsp* Arena::CreateMaybeMessage<::chunkmaster::CalculateUploadSliceLengthsRsp>(Arena*);
template<> ::chunkmaster::ChunkInformation* Arena::CreateMaybeMessage<::chunkmaster::ChunkInformation>(Arena*);
template<> ::chunkmaster::FinishUploadSliceReq* Arena::CreateMaybeMessage<::chunkmaster::FinishUploadSliceReq>(Arena*);
template<> ::chunkmaster::FinishUploadSliceRsp* Arena::CreateMaybeMessage<::chunkmaster::FinishUploadSliceRsp>(Arena*);
template<> ::chunkmaster::ReportChunkInformationReq* Arena::CreateMaybeMessage<::chunkmaster::ReportChunkInformationReq>(Arena*);
template<> ::chunkmaster::ReportChunkInformationRsp* Arena::CreateMaybeMessage<::chunkmaster::ReportChunkInformationRsp>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace chunkmaster {

enum ChunkState {
  STANDBY = 0,
  WRITING = 1,
  ERROR = 2,
  MOVING = 3,
  EMPTY = 4,
  EMPTYERROR = 5,
  ChunkState_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ChunkState_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ChunkState_IsValid(int value);
const ChunkState ChunkState_MIN = STANDBY;
const ChunkState ChunkState_MAX = EMPTYERROR;
const int ChunkState_ARRAYSIZE = ChunkState_MAX + 1;

const ::google::protobuf::EnumDescriptor* ChunkState_descriptor();
inline const ::std::string& ChunkState_Name(ChunkState value) {
  return ::google::protobuf::internal::NameOfEnum(
    ChunkState_descriptor(), value);
}
inline bool ChunkState_Parse(
    const ::std::string& name, ChunkState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ChunkState>(
    ChunkState_descriptor(), name, value);
}
// ===================================================================

class CalculateUploadSliceLengthsReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chunkmaster.CalculateUploadSliceLengthsReq) */ {
 public:
  CalculateUploadSliceLengthsReq();
  virtual ~CalculateUploadSliceLengthsReq();

  CalculateUploadSliceLengthsReq(const CalculateUploadSliceLengthsReq& from);

  inline CalculateUploadSliceLengthsReq& operator=(const CalculateUploadSliceLengthsReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CalculateUploadSliceLengthsReq(CalculateUploadSliceLengthsReq&& from) noexcept
    : CalculateUploadSliceLengthsReq() {
    *this = ::std::move(from);
  }

  inline CalculateUploadSliceLengthsReq& operator=(CalculateUploadSliceLengthsReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CalculateUploadSliceLengthsReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CalculateUploadSliceLengthsReq* internal_default_instance() {
    return reinterpret_cast<const CalculateUploadSliceLengthsReq*>(
               &_CalculateUploadSliceLengthsReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(CalculateUploadSliceLengthsReq* other);
  friend void swap(CalculateUploadSliceLengthsReq& a, CalculateUploadSliceLengthsReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CalculateUploadSliceLengthsReq* New() const final {
    return CreateMaybeMessage<CalculateUploadSliceLengthsReq>(NULL);
  }

  CalculateUploadSliceLengthsReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CalculateUploadSliceLengthsReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CalculateUploadSliceLengthsReq& from);
  void MergeFrom(const CalculateUploadSliceLengthsReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CalculateUploadSliceLengthsReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 data_length = 1;
  void clear_data_length();
  static const int kDataLengthFieldNumber = 1;
  ::google::protobuf::uint64 data_length() const;
  void set_data_length(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:chunkmaster.CalculateUploadSliceLengthsReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 data_length_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_chunkmaster_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CalculateUploadSliceLengthsRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chunkmaster.CalculateUploadSliceLengthsRsp) */ {
 public:
  CalculateUploadSliceLengthsRsp();
  virtual ~CalculateUploadSliceLengthsRsp();

  CalculateUploadSliceLengthsRsp(const CalculateUploadSliceLengthsRsp& from);

  inline CalculateUploadSliceLengthsRsp& operator=(const CalculateUploadSliceLengthsRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CalculateUploadSliceLengthsRsp(CalculateUploadSliceLengthsRsp&& from) noexcept
    : CalculateUploadSliceLengthsRsp() {
    *this = ::std::move(from);
  }

  inline CalculateUploadSliceLengthsRsp& operator=(CalculateUploadSliceLengthsRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CalculateUploadSliceLengthsRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CalculateUploadSliceLengthsRsp* internal_default_instance() {
    return reinterpret_cast<const CalculateUploadSliceLengthsRsp*>(
               &_CalculateUploadSliceLengthsRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(CalculateUploadSliceLengthsRsp* other);
  friend void swap(CalculateUploadSliceLengthsRsp& a, CalculateUploadSliceLengthsRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CalculateUploadSliceLengthsRsp* New() const final {
    return CreateMaybeMessage<CalculateUploadSliceLengthsRsp>(NULL);
  }

  CalculateUploadSliceLengthsRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CalculateUploadSliceLengthsRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CalculateUploadSliceLengthsRsp& from);
  void MergeFrom(const CalculateUploadSliceLengthsRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CalculateUploadSliceLengthsRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 lengths = 1;
  int lengths_size() const;
  void clear_lengths();
  static const int kLengthsFieldNumber = 1;
  ::google::protobuf::uint32 lengths(int index) const;
  void set_lengths(int index, ::google::protobuf::uint32 value);
  void add_lengths(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      lengths() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_lengths();

  // @@protoc_insertion_point(class_scope:chunkmaster.CalculateUploadSliceLengthsRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > lengths_;
  mutable int _lengths_cached_byte_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_chunkmaster_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AllocateUploadSliceReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chunkmaster.AllocateUploadSliceReq) */ {
 public:
  AllocateUploadSliceReq();
  virtual ~AllocateUploadSliceReq();

  AllocateUploadSliceReq(const AllocateUploadSliceReq& from);

  inline AllocateUploadSliceReq& operator=(const AllocateUploadSliceReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AllocateUploadSliceReq(AllocateUploadSliceReq&& from) noexcept
    : AllocateUploadSliceReq() {
    *this = ::std::move(from);
  }

  inline AllocateUploadSliceReq& operator=(AllocateUploadSliceReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AllocateUploadSliceReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AllocateUploadSliceReq* internal_default_instance() {
    return reinterpret_cast<const AllocateUploadSliceReq*>(
               &_AllocateUploadSliceReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(AllocateUploadSliceReq* other);
  friend void swap(AllocateUploadSliceReq& a, AllocateUploadSliceReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AllocateUploadSliceReq* New() const final {
    return CreateMaybeMessage<AllocateUploadSliceReq>(NULL);
  }

  AllocateUploadSliceReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AllocateUploadSliceReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AllocateUploadSliceReq& from);
  void MergeFrom(const AllocateUploadSliceReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AllocateUploadSliceReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 data_length = 1;
  void clear_data_length();
  static const int kDataLengthFieldNumber = 1;
  ::google::protobuf::uint64 data_length() const;
  void set_data_length(::google::protobuf::uint64 value);

  // uint32 replica_policy = 2;
  void clear_replica_policy();
  static const int kReplicaPolicyFieldNumber = 2;
  ::google::protobuf::uint32 replica_policy() const;
  void set_replica_policy(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:chunkmaster.AllocateUploadSliceReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 data_length_;
  ::google::protobuf::uint32 replica_policy_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_chunkmaster_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AllocateUploadSliceRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chunkmaster.AllocateUploadSliceRsp) */ {
 public:
  AllocateUploadSliceRsp();
  virtual ~AllocateUploadSliceRsp();

  AllocateUploadSliceRsp(const AllocateUploadSliceRsp& from);

  inline AllocateUploadSliceRsp& operator=(const AllocateUploadSliceRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AllocateUploadSliceRsp(AllocateUploadSliceRsp&& from) noexcept
    : AllocateUploadSliceRsp() {
    *this = ::std::move(from);
  }

  inline AllocateUploadSliceRsp& operator=(AllocateUploadSliceRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AllocateUploadSliceRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AllocateUploadSliceRsp* internal_default_instance() {
    return reinterpret_cast<const AllocateUploadSliceRsp*>(
               &_AllocateUploadSliceRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(AllocateUploadSliceRsp* other);
  friend void swap(AllocateUploadSliceRsp& a, AllocateUploadSliceRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AllocateUploadSliceRsp* New() const final {
    return CreateMaybeMessage<AllocateUploadSliceRsp>(NULL);
  }

  AllocateUploadSliceRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AllocateUploadSliceRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AllocateUploadSliceRsp& from);
  void MergeFrom(const AllocateUploadSliceRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AllocateUploadSliceRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 physical_slice_id = 2;
  int physical_slice_id_size() const;
  void clear_physical_slice_id();
  static const int kPhysicalSliceIdFieldNumber = 2;
  ::google::protobuf::uint64 physical_slice_id(int index) const;
  void set_physical_slice_id(int index, ::google::protobuf::uint64 value);
  void add_physical_slice_id(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      physical_slice_id() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_physical_slice_id();

  // uint64 logical_slice_id = 1;
  void clear_logical_slice_id();
  static const int kLogicalSliceIdFieldNumber = 1;
  ::google::protobuf::uint64 logical_slice_id() const;
  void set_logical_slice_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:chunkmaster.AllocateUploadSliceRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > physical_slice_id_;
  mutable int _physical_slice_id_cached_byte_size_;
  ::google::protobuf::uint64 logical_slice_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_chunkmaster_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FinishUploadSliceReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chunkmaster.FinishUploadSliceReq) */ {
 public:
  FinishUploadSliceReq();
  virtual ~FinishUploadSliceReq();

  FinishUploadSliceReq(const FinishUploadSliceReq& from);

  inline FinishUploadSliceReq& operator=(const FinishUploadSliceReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FinishUploadSliceReq(FinishUploadSliceReq&& from) noexcept
    : FinishUploadSliceReq() {
    *this = ::std::move(from);
  }

  inline FinishUploadSliceReq& operator=(FinishUploadSliceReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FinishUploadSliceReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FinishUploadSliceReq* internal_default_instance() {
    return reinterpret_cast<const FinishUploadSliceReq*>(
               &_FinishUploadSliceReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(FinishUploadSliceReq* other);
  friend void swap(FinishUploadSliceReq& a, FinishUploadSliceReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FinishUploadSliceReq* New() const final {
    return CreateMaybeMessage<FinishUploadSliceReq>(NULL);
  }

  FinishUploadSliceReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FinishUploadSliceReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FinishUploadSliceReq& from);
  void MergeFrom(const FinishUploadSliceReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FinishUploadSliceReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 physical_slice_id = 1;
  void clear_physical_slice_id();
  static const int kPhysicalSliceIdFieldNumber = 1;
  ::google::protobuf::uint64 physical_slice_id() const;
  void set_physical_slice_id(::google::protobuf::uint64 value);

  // bool is_normal_exit = 2;
  void clear_is_normal_exit();
  static const int kIsNormalExitFieldNumber = 2;
  bool is_normal_exit() const;
  void set_is_normal_exit(bool value);

  // @@protoc_insertion_point(class_scope:chunkmaster.FinishUploadSliceReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 physical_slice_id_;
  bool is_normal_exit_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_chunkmaster_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FinishUploadSliceRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chunkmaster.FinishUploadSliceRsp) */ {
 public:
  FinishUploadSliceRsp();
  virtual ~FinishUploadSliceRsp();

  FinishUploadSliceRsp(const FinishUploadSliceRsp& from);

  inline FinishUploadSliceRsp& operator=(const FinishUploadSliceRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FinishUploadSliceRsp(FinishUploadSliceRsp&& from) noexcept
    : FinishUploadSliceRsp() {
    *this = ::std::move(from);
  }

  inline FinishUploadSliceRsp& operator=(FinishUploadSliceRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FinishUploadSliceRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FinishUploadSliceRsp* internal_default_instance() {
    return reinterpret_cast<const FinishUploadSliceRsp*>(
               &_FinishUploadSliceRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(FinishUploadSliceRsp* other);
  friend void swap(FinishUploadSliceRsp& a, FinishUploadSliceRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FinishUploadSliceRsp* New() const final {
    return CreateMaybeMessage<FinishUploadSliceRsp>(NULL);
  }

  FinishUploadSliceRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FinishUploadSliceRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FinishUploadSliceRsp& from);
  void MergeFrom(const FinishUploadSliceRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FinishUploadSliceRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:chunkmaster.FinishUploadSliceRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_chunkmaster_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BatchGetPhysicalSlicesReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chunkmaster.BatchGetPhysicalSlicesReq) */ {
 public:
  BatchGetPhysicalSlicesReq();
  virtual ~BatchGetPhysicalSlicesReq();

  BatchGetPhysicalSlicesReq(const BatchGetPhysicalSlicesReq& from);

  inline BatchGetPhysicalSlicesReq& operator=(const BatchGetPhysicalSlicesReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BatchGetPhysicalSlicesReq(BatchGetPhysicalSlicesReq&& from) noexcept
    : BatchGetPhysicalSlicesReq() {
    *this = ::std::move(from);
  }

  inline BatchGetPhysicalSlicesReq& operator=(BatchGetPhysicalSlicesReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BatchGetPhysicalSlicesReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BatchGetPhysicalSlicesReq* internal_default_instance() {
    return reinterpret_cast<const BatchGetPhysicalSlicesReq*>(
               &_BatchGetPhysicalSlicesReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(BatchGetPhysicalSlicesReq* other);
  friend void swap(BatchGetPhysicalSlicesReq& a, BatchGetPhysicalSlicesReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BatchGetPhysicalSlicesReq* New() const final {
    return CreateMaybeMessage<BatchGetPhysicalSlicesReq>(NULL);
  }

  BatchGetPhysicalSlicesReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BatchGetPhysicalSlicesReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BatchGetPhysicalSlicesReq& from);
  void MergeFrom(const BatchGetPhysicalSlicesReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatchGetPhysicalSlicesReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 logical_slice_ids = 1;
  int logical_slice_ids_size() const;
  void clear_logical_slice_ids();
  static const int kLogicalSliceIdsFieldNumber = 1;
  ::google::protobuf::uint64 logical_slice_ids(int index) const;
  void set_logical_slice_ids(int index, ::google::protobuf::uint64 value);
  void add_logical_slice_ids(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      logical_slice_ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_logical_slice_ids();

  // @@protoc_insertion_point(class_scope:chunkmaster.BatchGetPhysicalSlicesReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > logical_slice_ids_;
  mutable int _logical_slice_ids_cached_byte_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_chunkmaster_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BatchGetPhysicalSlicesRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chunkmaster.BatchGetPhysicalSlicesRsp) */ {
 public:
  BatchGetPhysicalSlicesRsp();
  virtual ~BatchGetPhysicalSlicesRsp();

  BatchGetPhysicalSlicesRsp(const BatchGetPhysicalSlicesRsp& from);

  inline BatchGetPhysicalSlicesRsp& operator=(const BatchGetPhysicalSlicesRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BatchGetPhysicalSlicesRsp(BatchGetPhysicalSlicesRsp&& from) noexcept
    : BatchGetPhysicalSlicesRsp() {
    *this = ::std::move(from);
  }

  inline BatchGetPhysicalSlicesRsp& operator=(BatchGetPhysicalSlicesRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BatchGetPhysicalSlicesRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BatchGetPhysicalSlicesRsp* internal_default_instance() {
    return reinterpret_cast<const BatchGetPhysicalSlicesRsp*>(
               &_BatchGetPhysicalSlicesRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(BatchGetPhysicalSlicesRsp* other);
  friend void swap(BatchGetPhysicalSlicesRsp& a, BatchGetPhysicalSlicesRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BatchGetPhysicalSlicesRsp* New() const final {
    return CreateMaybeMessage<BatchGetPhysicalSlicesRsp>(NULL);
  }

  BatchGetPhysicalSlicesRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BatchGetPhysicalSlicesRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BatchGetPhysicalSlicesRsp& from);
  void MergeFrom(const BatchGetPhysicalSlicesRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatchGetPhysicalSlicesRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .chunkmaster.AllocateUploadSliceRsp results = 1;
  int results_size() const;
  void clear_results();
  static const int kResultsFieldNumber = 1;
  ::chunkmaster::AllocateUploadSliceRsp* mutable_results(int index);
  ::google::protobuf::RepeatedPtrField< ::chunkmaster::AllocateUploadSliceRsp >*
      mutable_results();
  const ::chunkmaster::AllocateUploadSliceRsp& results(int index) const;
  ::chunkmaster::AllocateUploadSliceRsp* add_results();
  const ::google::protobuf::RepeatedPtrField< ::chunkmaster::AllocateUploadSliceRsp >&
      results() const;

  // @@protoc_insertion_point(class_scope:chunkmaster.BatchGetPhysicalSlicesRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::chunkmaster::AllocateUploadSliceRsp > results_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_chunkmaster_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ChunkInformation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chunkmaster.ChunkInformation) */ {
 public:
  ChunkInformation();
  virtual ~ChunkInformation();

  ChunkInformation(const ChunkInformation& from);

  inline ChunkInformation& operator=(const ChunkInformation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChunkInformation(ChunkInformation&& from) noexcept
    : ChunkInformation() {
    *this = ::std::move(from);
  }

  inline ChunkInformation& operator=(ChunkInformation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChunkInformation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChunkInformation* internal_default_instance() {
    return reinterpret_cast<const ChunkInformation*>(
               &_ChunkInformation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(ChunkInformation* other);
  friend void swap(ChunkInformation& a, ChunkInformation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChunkInformation* New() const final {
    return CreateMaybeMessage<ChunkInformation>(NULL);
  }

  ChunkInformation* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ChunkInformation>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ChunkInformation& from);
  void MergeFrom(const ChunkInformation& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChunkInformation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 chunk_id = 1;
  void clear_chunk_id();
  static const int kChunkIdFieldNumber = 1;
  ::google::protobuf::uint64 chunk_id() const;
  void set_chunk_id(::google::protobuf::uint64 value);

  // uint32 logical_used_space = 2;
  void clear_logical_used_space();
  static const int kLogicalUsedSpaceFieldNumber = 2;
  ::google::protobuf::uint32 logical_used_space() const;
  void set_logical_used_space(::google::protobuf::uint32 value);

  // uint32 actual_used_space = 3;
  void clear_actual_used_space();
  static const int kActualUsedSpaceFieldNumber = 3;
  ::google::protobuf::uint32 actual_used_space() const;
  void set_actual_used_space(::google::protobuf::uint32 value);

  // .chunkmaster.ChunkState state = 4;
  void clear_state();
  static const int kStateFieldNumber = 4;
  ::chunkmaster::ChunkState state() const;
  void set_state(::chunkmaster::ChunkState value);

  // @@protoc_insertion_point(class_scope:chunkmaster.ChunkInformation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 chunk_id_;
  ::google::protobuf::uint32 logical_used_space_;
  ::google::protobuf::uint32 actual_used_space_;
  int state_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_chunkmaster_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReportChunkInformationReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chunkmaster.ReportChunkInformationReq) */ {
 public:
  ReportChunkInformationReq();
  virtual ~ReportChunkInformationReq();

  ReportChunkInformationReq(const ReportChunkInformationReq& from);

  inline ReportChunkInformationReq& operator=(const ReportChunkInformationReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReportChunkInformationReq(ReportChunkInformationReq&& from) noexcept
    : ReportChunkInformationReq() {
    *this = ::std::move(from);
  }

  inline ReportChunkInformationReq& operator=(ReportChunkInformationReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReportChunkInformationReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReportChunkInformationReq* internal_default_instance() {
    return reinterpret_cast<const ReportChunkInformationReq*>(
               &_ReportChunkInformationReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(ReportChunkInformationReq* other);
  friend void swap(ReportChunkInformationReq& a, ReportChunkInformationReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReportChunkInformationReq* New() const final {
    return CreateMaybeMessage<ReportChunkInformationReq>(NULL);
  }

  ReportChunkInformationReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReportChunkInformationReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReportChunkInformationReq& from);
  void MergeFrom(const ReportChunkInformationReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReportChunkInformationReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .chunkmaster.ChunkInformation chunk_info = 1;
  int chunk_info_size() const;
  void clear_chunk_info();
  static const int kChunkInfoFieldNumber = 1;
  ::chunkmaster::ChunkInformation* mutable_chunk_info(int index);
  ::google::protobuf::RepeatedPtrField< ::chunkmaster::ChunkInformation >*
      mutable_chunk_info();
  const ::chunkmaster::ChunkInformation& chunk_info(int index) const;
  ::chunkmaster::ChunkInformation* add_chunk_info();
  const ::google::protobuf::RepeatedPtrField< ::chunkmaster::ChunkInformation >&
      chunk_info() const;

  // @@protoc_insertion_point(class_scope:chunkmaster.ReportChunkInformationReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::chunkmaster::ChunkInformation > chunk_info_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_chunkmaster_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReportChunkInformationRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chunkmaster.ReportChunkInformationRsp) */ {
 public:
  ReportChunkInformationRsp();
  virtual ~ReportChunkInformationRsp();

  ReportChunkInformationRsp(const ReportChunkInformationRsp& from);

  inline ReportChunkInformationRsp& operator=(const ReportChunkInformationRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReportChunkInformationRsp(ReportChunkInformationRsp&& from) noexcept
    : ReportChunkInformationRsp() {
    *this = ::std::move(from);
  }

  inline ReportChunkInformationRsp& operator=(ReportChunkInformationRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReportChunkInformationRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReportChunkInformationRsp* internal_default_instance() {
    return reinterpret_cast<const ReportChunkInformationRsp*>(
               &_ReportChunkInformationRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(ReportChunkInformationRsp* other);
  friend void swap(ReportChunkInformationRsp& a, ReportChunkInformationRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReportChunkInformationRsp* New() const final {
    return CreateMaybeMessage<ReportChunkInformationRsp>(NULL);
  }

  ReportChunkInformationRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReportChunkInformationRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReportChunkInformationRsp& from);
  void MergeFrom(const ReportChunkInformationRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReportChunkInformationRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:chunkmaster.ReportChunkInformationRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_chunkmaster_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CalculateUploadSliceLengthsReq

// uint64 data_length = 1;
inline void CalculateUploadSliceLengthsReq::clear_data_length() {
  data_length_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 CalculateUploadSliceLengthsReq::data_length() const {
  // @@protoc_insertion_point(field_get:chunkmaster.CalculateUploadSliceLengthsReq.data_length)
  return data_length_;
}
inline void CalculateUploadSliceLengthsReq::set_data_length(::google::protobuf::uint64 value) {
  
  data_length_ = value;
  // @@protoc_insertion_point(field_set:chunkmaster.CalculateUploadSliceLengthsReq.data_length)
}

// -------------------------------------------------------------------

// CalculateUploadSliceLengthsRsp

// repeated uint32 lengths = 1;
inline int CalculateUploadSliceLengthsRsp::lengths_size() const {
  return lengths_.size();
}
inline void CalculateUploadSliceLengthsRsp::clear_lengths() {
  lengths_.Clear();
}
inline ::google::protobuf::uint32 CalculateUploadSliceLengthsRsp::lengths(int index) const {
  // @@protoc_insertion_point(field_get:chunkmaster.CalculateUploadSliceLengthsRsp.lengths)
  return lengths_.Get(index);
}
inline void CalculateUploadSliceLengthsRsp::set_lengths(int index, ::google::protobuf::uint32 value) {
  lengths_.Set(index, value);
  // @@protoc_insertion_point(field_set:chunkmaster.CalculateUploadSliceLengthsRsp.lengths)
}
inline void CalculateUploadSliceLengthsRsp::add_lengths(::google::protobuf::uint32 value) {
  lengths_.Add(value);
  // @@protoc_insertion_point(field_add:chunkmaster.CalculateUploadSliceLengthsRsp.lengths)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CalculateUploadSliceLengthsRsp::lengths() const {
  // @@protoc_insertion_point(field_list:chunkmaster.CalculateUploadSliceLengthsRsp.lengths)
  return lengths_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CalculateUploadSliceLengthsRsp::mutable_lengths() {
  // @@protoc_insertion_point(field_mutable_list:chunkmaster.CalculateUploadSliceLengthsRsp.lengths)
  return &lengths_;
}

// -------------------------------------------------------------------

// AllocateUploadSliceReq

// uint64 data_length = 1;
inline void AllocateUploadSliceReq::clear_data_length() {
  data_length_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 AllocateUploadSliceReq::data_length() const {
  // @@protoc_insertion_point(field_get:chunkmaster.AllocateUploadSliceReq.data_length)
  return data_length_;
}
inline void AllocateUploadSliceReq::set_data_length(::google::protobuf::uint64 value) {
  
  data_length_ = value;
  // @@protoc_insertion_point(field_set:chunkmaster.AllocateUploadSliceReq.data_length)
}

// uint32 replica_policy = 2;
inline void AllocateUploadSliceReq::clear_replica_policy() {
  replica_policy_ = 0u;
}
inline ::google::protobuf::uint32 AllocateUploadSliceReq::replica_policy() const {
  // @@protoc_insertion_point(field_get:chunkmaster.AllocateUploadSliceReq.replica_policy)
  return replica_policy_;
}
inline void AllocateUploadSliceReq::set_replica_policy(::google::protobuf::uint32 value) {
  
  replica_policy_ = value;
  // @@protoc_insertion_point(field_set:chunkmaster.AllocateUploadSliceReq.replica_policy)
}

// -------------------------------------------------------------------

// AllocateUploadSliceRsp

// uint64 logical_slice_id = 1;
inline void AllocateUploadSliceRsp::clear_logical_slice_id() {
  logical_slice_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 AllocateUploadSliceRsp::logical_slice_id() const {
  // @@protoc_insertion_point(field_get:chunkmaster.AllocateUploadSliceRsp.logical_slice_id)
  return logical_slice_id_;
}
inline void AllocateUploadSliceRsp::set_logical_slice_id(::google::protobuf::uint64 value) {
  
  logical_slice_id_ = value;
  // @@protoc_insertion_point(field_set:chunkmaster.AllocateUploadSliceRsp.logical_slice_id)
}

// repeated uint64 physical_slice_id = 2;
inline int AllocateUploadSliceRsp::physical_slice_id_size() const {
  return physical_slice_id_.size();
}
inline void AllocateUploadSliceRsp::clear_physical_slice_id() {
  physical_slice_id_.Clear();
}
inline ::google::protobuf::uint64 AllocateUploadSliceRsp::physical_slice_id(int index) const {
  // @@protoc_insertion_point(field_get:chunkmaster.AllocateUploadSliceRsp.physical_slice_id)
  return physical_slice_id_.Get(index);
}
inline void AllocateUploadSliceRsp::set_physical_slice_id(int index, ::google::protobuf::uint64 value) {
  physical_slice_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:chunkmaster.AllocateUploadSliceRsp.physical_slice_id)
}
inline void AllocateUploadSliceRsp::add_physical_slice_id(::google::protobuf::uint64 value) {
  physical_slice_id_.Add(value);
  // @@protoc_insertion_point(field_add:chunkmaster.AllocateUploadSliceRsp.physical_slice_id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
AllocateUploadSliceRsp::physical_slice_id() const {
  // @@protoc_insertion_point(field_list:chunkmaster.AllocateUploadSliceRsp.physical_slice_id)
  return physical_slice_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
AllocateUploadSliceRsp::mutable_physical_slice_id() {
  // @@protoc_insertion_point(field_mutable_list:chunkmaster.AllocateUploadSliceRsp.physical_slice_id)
  return &physical_slice_id_;
}

// -------------------------------------------------------------------

// FinishUploadSliceReq

// uint64 physical_slice_id = 1;
inline void FinishUploadSliceReq::clear_physical_slice_id() {
  physical_slice_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 FinishUploadSliceReq::physical_slice_id() const {
  // @@protoc_insertion_point(field_get:chunkmaster.FinishUploadSliceReq.physical_slice_id)
  return physical_slice_id_;
}
inline void FinishUploadSliceReq::set_physical_slice_id(::google::protobuf::uint64 value) {
  
  physical_slice_id_ = value;
  // @@protoc_insertion_point(field_set:chunkmaster.FinishUploadSliceReq.physical_slice_id)
}

// bool is_normal_exit = 2;
inline void FinishUploadSliceReq::clear_is_normal_exit() {
  is_normal_exit_ = false;
}
inline bool FinishUploadSliceReq::is_normal_exit() const {
  // @@protoc_insertion_point(field_get:chunkmaster.FinishUploadSliceReq.is_normal_exit)
  return is_normal_exit_;
}
inline void FinishUploadSliceReq::set_is_normal_exit(bool value) {
  
  is_normal_exit_ = value;
  // @@protoc_insertion_point(field_set:chunkmaster.FinishUploadSliceReq.is_normal_exit)
}

// -------------------------------------------------------------------

// FinishUploadSliceRsp

// -------------------------------------------------------------------

// BatchGetPhysicalSlicesReq

// repeated uint64 logical_slice_ids = 1;
inline int BatchGetPhysicalSlicesReq::logical_slice_ids_size() const {
  return logical_slice_ids_.size();
}
inline void BatchGetPhysicalSlicesReq::clear_logical_slice_ids() {
  logical_slice_ids_.Clear();
}
inline ::google::protobuf::uint64 BatchGetPhysicalSlicesReq::logical_slice_ids(int index) const {
  // @@protoc_insertion_point(field_get:chunkmaster.BatchGetPhysicalSlicesReq.logical_slice_ids)
  return logical_slice_ids_.Get(index);
}
inline void BatchGetPhysicalSlicesReq::set_logical_slice_ids(int index, ::google::protobuf::uint64 value) {
  logical_slice_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:chunkmaster.BatchGetPhysicalSlicesReq.logical_slice_ids)
}
inline void BatchGetPhysicalSlicesReq::add_logical_slice_ids(::google::protobuf::uint64 value) {
  logical_slice_ids_.Add(value);
  // @@protoc_insertion_point(field_add:chunkmaster.BatchGetPhysicalSlicesReq.logical_slice_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
BatchGetPhysicalSlicesReq::logical_slice_ids() const {
  // @@protoc_insertion_point(field_list:chunkmaster.BatchGetPhysicalSlicesReq.logical_slice_ids)
  return logical_slice_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
BatchGetPhysicalSlicesReq::mutable_logical_slice_ids() {
  // @@protoc_insertion_point(field_mutable_list:chunkmaster.BatchGetPhysicalSlicesReq.logical_slice_ids)
  return &logical_slice_ids_;
}

// -------------------------------------------------------------------

// BatchGetPhysicalSlicesRsp

// repeated .chunkmaster.AllocateUploadSliceRsp results = 1;
inline int BatchGetPhysicalSlicesRsp::results_size() const {
  return results_.size();
}
inline void BatchGetPhysicalSlicesRsp::clear_results() {
  results_.Clear();
}
inline ::chunkmaster::AllocateUploadSliceRsp* BatchGetPhysicalSlicesRsp::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:chunkmaster.BatchGetPhysicalSlicesRsp.results)
  return results_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::chunkmaster::AllocateUploadSliceRsp >*
BatchGetPhysicalSlicesRsp::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:chunkmaster.BatchGetPhysicalSlicesRsp.results)
  return &results_;
}
inline const ::chunkmaster::AllocateUploadSliceRsp& BatchGetPhysicalSlicesRsp::results(int index) const {
  // @@protoc_insertion_point(field_get:chunkmaster.BatchGetPhysicalSlicesRsp.results)
  return results_.Get(index);
}
inline ::chunkmaster::AllocateUploadSliceRsp* BatchGetPhysicalSlicesRsp::add_results() {
  // @@protoc_insertion_point(field_add:chunkmaster.BatchGetPhysicalSlicesRsp.results)
  return results_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::chunkmaster::AllocateUploadSliceRsp >&
BatchGetPhysicalSlicesRsp::results() const {
  // @@protoc_insertion_point(field_list:chunkmaster.BatchGetPhysicalSlicesRsp.results)
  return results_;
}

// -------------------------------------------------------------------

// ChunkInformation

// uint64 chunk_id = 1;
inline void ChunkInformation::clear_chunk_id() {
  chunk_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ChunkInformation::chunk_id() const {
  // @@protoc_insertion_point(field_get:chunkmaster.ChunkInformation.chunk_id)
  return chunk_id_;
}
inline void ChunkInformation::set_chunk_id(::google::protobuf::uint64 value) {
  
  chunk_id_ = value;
  // @@protoc_insertion_point(field_set:chunkmaster.ChunkInformation.chunk_id)
}

// uint32 logical_used_space = 2;
inline void ChunkInformation::clear_logical_used_space() {
  logical_used_space_ = 0u;
}
inline ::google::protobuf::uint32 ChunkInformation::logical_used_space() const {
  // @@protoc_insertion_point(field_get:chunkmaster.ChunkInformation.logical_used_space)
  return logical_used_space_;
}
inline void ChunkInformation::set_logical_used_space(::google::protobuf::uint32 value) {
  
  logical_used_space_ = value;
  // @@protoc_insertion_point(field_set:chunkmaster.ChunkInformation.logical_used_space)
}

// uint32 actual_used_space = 3;
inline void ChunkInformation::clear_actual_used_space() {
  actual_used_space_ = 0u;
}
inline ::google::protobuf::uint32 ChunkInformation::actual_used_space() const {
  // @@protoc_insertion_point(field_get:chunkmaster.ChunkInformation.actual_used_space)
  return actual_used_space_;
}
inline void ChunkInformation::set_actual_used_space(::google::protobuf::uint32 value) {
  
  actual_used_space_ = value;
  // @@protoc_insertion_point(field_set:chunkmaster.ChunkInformation.actual_used_space)
}

// .chunkmaster.ChunkState state = 4;
inline void ChunkInformation::clear_state() {
  state_ = 0;
}
inline ::chunkmaster::ChunkState ChunkInformation::state() const {
  // @@protoc_insertion_point(field_get:chunkmaster.ChunkInformation.state)
  return static_cast< ::chunkmaster::ChunkState >(state_);
}
inline void ChunkInformation::set_state(::chunkmaster::ChunkState value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:chunkmaster.ChunkInformation.state)
}

// -------------------------------------------------------------------

// ReportChunkInformationReq

// repeated .chunkmaster.ChunkInformation chunk_info = 1;
inline int ReportChunkInformationReq::chunk_info_size() const {
  return chunk_info_.size();
}
inline void ReportChunkInformationReq::clear_chunk_info() {
  chunk_info_.Clear();
}
inline ::chunkmaster::ChunkInformation* ReportChunkInformationReq::mutable_chunk_info(int index) {
  // @@protoc_insertion_point(field_mutable:chunkmaster.ReportChunkInformationReq.chunk_info)
  return chunk_info_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::chunkmaster::ChunkInformation >*
ReportChunkInformationReq::mutable_chunk_info() {
  // @@protoc_insertion_point(field_mutable_list:chunkmaster.ReportChunkInformationReq.chunk_info)
  return &chunk_info_;
}
inline const ::chunkmaster::ChunkInformation& ReportChunkInformationReq::chunk_info(int index) const {
  // @@protoc_insertion_point(field_get:chunkmaster.ReportChunkInformationReq.chunk_info)
  return chunk_info_.Get(index);
}
inline ::chunkmaster::ChunkInformation* ReportChunkInformationReq::add_chunk_info() {
  // @@protoc_insertion_point(field_add:chunkmaster.ReportChunkInformationReq.chunk_info)
  return chunk_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::chunkmaster::ChunkInformation >&
ReportChunkInformationReq::chunk_info() const {
  // @@protoc_insertion_point(field_list:chunkmaster.ReportChunkInformationReq.chunk_info)
  return chunk_info_;
}

// -------------------------------------------------------------------

// ReportChunkInformationRsp

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace chunkmaster

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::chunkmaster::ChunkState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::chunkmaster::ChunkState>() {
  return ::chunkmaster::ChunkState_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_chunkmaster_2eproto
