// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chunkmaster.proto

#include "chunkmaster.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_chunkmaster_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_chunkmaster_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_AllocateUploadSliceRsp;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_chunkmaster_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ChunkInformation;
}  // namespace protobuf_chunkmaster_2eproto
namespace chunkmaster {
class CalculateUploadSliceLengthsReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CalculateUploadSliceLengthsReq>
      _instance;
} _CalculateUploadSliceLengthsReq_default_instance_;
class CalculateUploadSliceLengthsRspDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CalculateUploadSliceLengthsRsp>
      _instance;
} _CalculateUploadSliceLengthsRsp_default_instance_;
class AllocateUploadSliceReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AllocateUploadSliceReq>
      _instance;
} _AllocateUploadSliceReq_default_instance_;
class AllocateUploadSliceRspDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AllocateUploadSliceRsp>
      _instance;
} _AllocateUploadSliceRsp_default_instance_;
class FinishUploadSliceReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FinishUploadSliceReq>
      _instance;
} _FinishUploadSliceReq_default_instance_;
class FinishUploadSliceRspDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FinishUploadSliceRsp>
      _instance;
} _FinishUploadSliceRsp_default_instance_;
class BatchGetPhysicalSlicesReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BatchGetPhysicalSlicesReq>
      _instance;
} _BatchGetPhysicalSlicesReq_default_instance_;
class BatchGetPhysicalSlicesRspDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BatchGetPhysicalSlicesRsp>
      _instance;
} _BatchGetPhysicalSlicesRsp_default_instance_;
class ChunkInformationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ChunkInformation>
      _instance;
} _ChunkInformation_default_instance_;
class ReportChunkInformationReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReportChunkInformationReq>
      _instance;
} _ReportChunkInformationReq_default_instance_;
class ReportChunkInformationRspDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReportChunkInformationRsp>
      _instance;
} _ReportChunkInformationRsp_default_instance_;
}  // namespace chunkmaster
namespace protobuf_chunkmaster_2eproto {
static void InitDefaultsCalculateUploadSliceLengthsReq() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chunkmaster::_CalculateUploadSliceLengthsReq_default_instance_;
    new (ptr) ::chunkmaster::CalculateUploadSliceLengthsReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chunkmaster::CalculateUploadSliceLengthsReq::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CalculateUploadSliceLengthsReq =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCalculateUploadSliceLengthsReq}, {}};

static void InitDefaultsCalculateUploadSliceLengthsRsp() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chunkmaster::_CalculateUploadSliceLengthsRsp_default_instance_;
    new (ptr) ::chunkmaster::CalculateUploadSliceLengthsRsp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chunkmaster::CalculateUploadSliceLengthsRsp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CalculateUploadSliceLengthsRsp =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCalculateUploadSliceLengthsRsp}, {}};

static void InitDefaultsAllocateUploadSliceReq() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chunkmaster::_AllocateUploadSliceReq_default_instance_;
    new (ptr) ::chunkmaster::AllocateUploadSliceReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chunkmaster::AllocateUploadSliceReq::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AllocateUploadSliceReq =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAllocateUploadSliceReq}, {}};

static void InitDefaultsAllocateUploadSliceRsp() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chunkmaster::_AllocateUploadSliceRsp_default_instance_;
    new (ptr) ::chunkmaster::AllocateUploadSliceRsp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chunkmaster::AllocateUploadSliceRsp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AllocateUploadSliceRsp =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAllocateUploadSliceRsp}, {}};

static void InitDefaultsFinishUploadSliceReq() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chunkmaster::_FinishUploadSliceReq_default_instance_;
    new (ptr) ::chunkmaster::FinishUploadSliceReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chunkmaster::FinishUploadSliceReq::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FinishUploadSliceReq =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFinishUploadSliceReq}, {}};

static void InitDefaultsFinishUploadSliceRsp() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chunkmaster::_FinishUploadSliceRsp_default_instance_;
    new (ptr) ::chunkmaster::FinishUploadSliceRsp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chunkmaster::FinishUploadSliceRsp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FinishUploadSliceRsp =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFinishUploadSliceRsp}, {}};

static void InitDefaultsBatchGetPhysicalSlicesReq() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chunkmaster::_BatchGetPhysicalSlicesReq_default_instance_;
    new (ptr) ::chunkmaster::BatchGetPhysicalSlicesReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chunkmaster::BatchGetPhysicalSlicesReq::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BatchGetPhysicalSlicesReq =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBatchGetPhysicalSlicesReq}, {}};

static void InitDefaultsBatchGetPhysicalSlicesRsp() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chunkmaster::_BatchGetPhysicalSlicesRsp_default_instance_;
    new (ptr) ::chunkmaster::BatchGetPhysicalSlicesRsp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chunkmaster::BatchGetPhysicalSlicesRsp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_BatchGetPhysicalSlicesRsp =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsBatchGetPhysicalSlicesRsp}, {
      &protobuf_chunkmaster_2eproto::scc_info_AllocateUploadSliceRsp.base,}};

static void InitDefaultsChunkInformation() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chunkmaster::_ChunkInformation_default_instance_;
    new (ptr) ::chunkmaster::ChunkInformation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chunkmaster::ChunkInformation::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ChunkInformation =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsChunkInformation}, {}};

static void InitDefaultsReportChunkInformationReq() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chunkmaster::_ReportChunkInformationReq_default_instance_;
    new (ptr) ::chunkmaster::ReportChunkInformationReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chunkmaster::ReportChunkInformationReq::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ReportChunkInformationReq =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsReportChunkInformationReq}, {
      &protobuf_chunkmaster_2eproto::scc_info_ChunkInformation.base,}};

static void InitDefaultsReportChunkInformationRsp() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chunkmaster::_ReportChunkInformationRsp_default_instance_;
    new (ptr) ::chunkmaster::ReportChunkInformationRsp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chunkmaster::ReportChunkInformationRsp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ReportChunkInformationRsp =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsReportChunkInformationRsp}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_CalculateUploadSliceLengthsReq.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CalculateUploadSliceLengthsRsp.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AllocateUploadSliceReq.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AllocateUploadSliceRsp.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FinishUploadSliceReq.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FinishUploadSliceRsp.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BatchGetPhysicalSlicesReq.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BatchGetPhysicalSlicesRsp.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ChunkInformation.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReportChunkInformationReq.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReportChunkInformationRsp.base);
}

::google::protobuf::Metadata file_level_metadata[11];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chunkmaster::CalculateUploadSliceLengthsReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chunkmaster::CalculateUploadSliceLengthsReq, data_length_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chunkmaster::CalculateUploadSliceLengthsRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chunkmaster::CalculateUploadSliceLengthsRsp, lengths_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chunkmaster::AllocateUploadSliceReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chunkmaster::AllocateUploadSliceReq, data_length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chunkmaster::AllocateUploadSliceReq, replica_policy_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chunkmaster::AllocateUploadSliceRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chunkmaster::AllocateUploadSliceRsp, logical_slice_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chunkmaster::AllocateUploadSliceRsp, physical_slice_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chunkmaster::FinishUploadSliceReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chunkmaster::FinishUploadSliceReq, physical_slice_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chunkmaster::FinishUploadSliceReq, is_normal_exit_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chunkmaster::FinishUploadSliceRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chunkmaster::BatchGetPhysicalSlicesReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chunkmaster::BatchGetPhysicalSlicesReq, logical_slice_ids_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chunkmaster::BatchGetPhysicalSlicesRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chunkmaster::BatchGetPhysicalSlicesRsp, results_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chunkmaster::ChunkInformation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chunkmaster::ChunkInformation, chunk_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chunkmaster::ChunkInformation, logical_used_space_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chunkmaster::ChunkInformation, actual_used_space_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chunkmaster::ChunkInformation, state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chunkmaster::ReportChunkInformationReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chunkmaster::ReportChunkInformationReq, chunk_info_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chunkmaster::ReportChunkInformationRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::chunkmaster::CalculateUploadSliceLengthsReq)},
  { 6, -1, sizeof(::chunkmaster::CalculateUploadSliceLengthsRsp)},
  { 12, -1, sizeof(::chunkmaster::AllocateUploadSliceReq)},
  { 19, -1, sizeof(::chunkmaster::AllocateUploadSliceRsp)},
  { 26, -1, sizeof(::chunkmaster::FinishUploadSliceReq)},
  { 33, -1, sizeof(::chunkmaster::FinishUploadSliceRsp)},
  { 38, -1, sizeof(::chunkmaster::BatchGetPhysicalSlicesReq)},
  { 44, -1, sizeof(::chunkmaster::BatchGetPhysicalSlicesRsp)},
  { 50, -1, sizeof(::chunkmaster::ChunkInformation)},
  { 59, -1, sizeof(::chunkmaster::ReportChunkInformationReq)},
  { 65, -1, sizeof(::chunkmaster::ReportChunkInformationRsp)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::chunkmaster::_CalculateUploadSliceLengthsReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chunkmaster::_CalculateUploadSliceLengthsRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chunkmaster::_AllocateUploadSliceReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chunkmaster::_AllocateUploadSliceRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chunkmaster::_FinishUploadSliceReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chunkmaster::_FinishUploadSliceRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chunkmaster::_BatchGetPhysicalSlicesReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chunkmaster::_BatchGetPhysicalSlicesRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chunkmaster::_ChunkInformation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chunkmaster::_ReportChunkInformationReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chunkmaster::_ReportChunkInformationRsp_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "chunkmaster.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 11);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\021chunkmaster.proto\022\013chunkmaster\"5\n\036Calc"
      "ulateUploadSliceLengthsReq\022\023\n\013data_lengt"
      "h\030\001 \001(\004\"1\n\036CalculateUploadSliceLengthsRs"
      "p\022\017\n\007lengths\030\001 \003(\r\"E\n\026AllocateUploadSlic"
      "eReq\022\023\n\013data_length\030\001 \001(\004\022\026\n\016replica_pol"
      "icy\030\002 \001(\r\"M\n\026AllocateUploadSliceRsp\022\030\n\020l"
      "ogical_slice_id\030\001 \001(\004\022\031\n\021physical_slice_"
      "id\030\002 \003(\004\"I\n\024FinishUploadSliceReq\022\031\n\021phys"
      "ical_slice_id\030\001 \001(\004\022\026\n\016is_normal_exit\030\002 "
      "\001(\010\"\026\n\024FinishUploadSliceRsp\"6\n\031BatchGetP"
      "hysicalSlicesReq\022\031\n\021logical_slice_ids\030\001 "
      "\003(\004\"Q\n\031BatchGetPhysicalSlicesRsp\0224\n\007resu"
      "lts\030\001 \003(\0132#.chunkmaster.AllocateUploadSl"
      "iceRsp\"\203\001\n\020ChunkInformation\022\020\n\010chunk_id\030"
      "\001 \001(\004\022\032\n\022logical_used_space\030\002 \001(\r\022\031\n\021act"
      "ual_used_space\030\003 \001(\r\022&\n\005state\030\004 \001(\0162\027.ch"
      "unkmaster.ChunkState\"N\n\031ReportChunkInfor"
      "mationReq\0221\n\nchunk_info\030\001 \003(\0132\035.chunkmas"
      "ter.ChunkInformation\"\033\n\031ReportChunkInfor"
      "mationRsp*X\n\nChunkState\022\013\n\007STANDBY\020\000\022\013\n\007"
      "WRITING\020\001\022\t\n\005ERROR\020\002\022\n\n\006MOVING\020\003\022\t\n\005EMPT"
      "Y\020\004\022\016\n\nEMPTYERROR\020\0052\235\004\n\022ChunkMasterServi"
      "ce\022w\n\033CalculateUploadSliceLengths\022+.chun"
      "kmaster.CalculateUploadSliceLengthsReq\032+"
      ".chunkmaster.CalculateUploadSliceLengths"
      "Rsp\022_\n\023AllocateUploadSlice\022#.chunkmaster"
      ".AllocateUploadSliceReq\032#.chunkmaster.Al"
      "locateUploadSliceRsp\022Y\n\021FinishUploadSlic"
      "e\022!.chunkmaster.FinishUploadSliceReq\032!.c"
      "hunkmaster.FinishUploadSliceRsp\022h\n\026Batch"
      "GetPhysicalSlices\022&.chunkmaster.BatchGet"
      "PhysicalSlicesReq\032&.chunkmaster.BatchGet"
      "PhysicalSlicesRsp\022h\n\026ReportChunkInformat"
      "ion\022&.chunkmaster.ReportChunkInformation"
      "Req\032&.chunkmaster.ReportChunkInformation"
      "Rspb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1411);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "chunkmaster.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_chunkmaster_2eproto
namespace chunkmaster {
const ::google::protobuf::EnumDescriptor* ChunkState_descriptor() {
  protobuf_chunkmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_chunkmaster_2eproto::file_level_enum_descriptors[0];
}
bool ChunkState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void CalculateUploadSliceLengthsReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CalculateUploadSliceLengthsReq::kDataLengthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CalculateUploadSliceLengthsReq::CalculateUploadSliceLengthsReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_chunkmaster_2eproto::scc_info_CalculateUploadSliceLengthsReq.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chunkmaster.CalculateUploadSliceLengthsReq)
}
CalculateUploadSliceLengthsReq::CalculateUploadSliceLengthsReq(const CalculateUploadSliceLengthsReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_length_ = from.data_length_;
  // @@protoc_insertion_point(copy_constructor:chunkmaster.CalculateUploadSliceLengthsReq)
}

void CalculateUploadSliceLengthsReq::SharedCtor() {
  data_length_ = GOOGLE_ULONGLONG(0);
}

CalculateUploadSliceLengthsReq::~CalculateUploadSliceLengthsReq() {
  // @@protoc_insertion_point(destructor:chunkmaster.CalculateUploadSliceLengthsReq)
  SharedDtor();
}

void CalculateUploadSliceLengthsReq::SharedDtor() {
}

void CalculateUploadSliceLengthsReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CalculateUploadSliceLengthsReq::descriptor() {
  ::protobuf_chunkmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chunkmaster_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CalculateUploadSliceLengthsReq& CalculateUploadSliceLengthsReq::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_chunkmaster_2eproto::scc_info_CalculateUploadSliceLengthsReq.base);
  return *internal_default_instance();
}


void CalculateUploadSliceLengthsReq::Clear() {
// @@protoc_insertion_point(message_clear_start:chunkmaster.CalculateUploadSliceLengthsReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_length_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool CalculateUploadSliceLengthsReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chunkmaster.CalculateUploadSliceLengthsReq)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 data_length = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &data_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chunkmaster.CalculateUploadSliceLengthsReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chunkmaster.CalculateUploadSliceLengthsReq)
  return false;
#undef DO_
}

void CalculateUploadSliceLengthsReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chunkmaster.CalculateUploadSliceLengthsReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 data_length = 1;
  if (this->data_length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->data_length(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:chunkmaster.CalculateUploadSliceLengthsReq)
}

::google::protobuf::uint8* CalculateUploadSliceLengthsReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chunkmaster.CalculateUploadSliceLengthsReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 data_length = 1;
  if (this->data_length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->data_length(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chunkmaster.CalculateUploadSliceLengthsReq)
  return target;
}

size_t CalculateUploadSliceLengthsReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chunkmaster.CalculateUploadSliceLengthsReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 data_length = 1;
  if (this->data_length() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->data_length());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CalculateUploadSliceLengthsReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chunkmaster.CalculateUploadSliceLengthsReq)
  GOOGLE_DCHECK_NE(&from, this);
  const CalculateUploadSliceLengthsReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CalculateUploadSliceLengthsReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chunkmaster.CalculateUploadSliceLengthsReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chunkmaster.CalculateUploadSliceLengthsReq)
    MergeFrom(*source);
  }
}

void CalculateUploadSliceLengthsReq::MergeFrom(const CalculateUploadSliceLengthsReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chunkmaster.CalculateUploadSliceLengthsReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data_length() != 0) {
    set_data_length(from.data_length());
  }
}

void CalculateUploadSliceLengthsReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chunkmaster.CalculateUploadSliceLengthsReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CalculateUploadSliceLengthsReq::CopyFrom(const CalculateUploadSliceLengthsReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chunkmaster.CalculateUploadSliceLengthsReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CalculateUploadSliceLengthsReq::IsInitialized() const {
  return true;
}

void CalculateUploadSliceLengthsReq::Swap(CalculateUploadSliceLengthsReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CalculateUploadSliceLengthsReq::InternalSwap(CalculateUploadSliceLengthsReq* other) {
  using std::swap;
  swap(data_length_, other->data_length_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CalculateUploadSliceLengthsReq::GetMetadata() const {
  protobuf_chunkmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chunkmaster_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CalculateUploadSliceLengthsRsp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CalculateUploadSliceLengthsRsp::kLengthsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CalculateUploadSliceLengthsRsp::CalculateUploadSliceLengthsRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_chunkmaster_2eproto::scc_info_CalculateUploadSliceLengthsRsp.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chunkmaster.CalculateUploadSliceLengthsRsp)
}
CalculateUploadSliceLengthsRsp::CalculateUploadSliceLengthsRsp(const CalculateUploadSliceLengthsRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      lengths_(from.lengths_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:chunkmaster.CalculateUploadSliceLengthsRsp)
}

void CalculateUploadSliceLengthsRsp::SharedCtor() {
}

CalculateUploadSliceLengthsRsp::~CalculateUploadSliceLengthsRsp() {
  // @@protoc_insertion_point(destructor:chunkmaster.CalculateUploadSliceLengthsRsp)
  SharedDtor();
}

void CalculateUploadSliceLengthsRsp::SharedDtor() {
}

void CalculateUploadSliceLengthsRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CalculateUploadSliceLengthsRsp::descriptor() {
  ::protobuf_chunkmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chunkmaster_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CalculateUploadSliceLengthsRsp& CalculateUploadSliceLengthsRsp::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_chunkmaster_2eproto::scc_info_CalculateUploadSliceLengthsRsp.base);
  return *internal_default_instance();
}


void CalculateUploadSliceLengthsRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:chunkmaster.CalculateUploadSliceLengthsRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lengths_.Clear();
  _internal_metadata_.Clear();
}

bool CalculateUploadSliceLengthsRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chunkmaster.CalculateUploadSliceLengthsRsp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 lengths = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_lengths())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 10u, input, this->mutable_lengths())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chunkmaster.CalculateUploadSliceLengthsRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chunkmaster.CalculateUploadSliceLengthsRsp)
  return false;
#undef DO_
}

void CalculateUploadSliceLengthsRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chunkmaster.CalculateUploadSliceLengthsRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 lengths = 1;
  if (this->lengths_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _lengths_cached_byte_size_));
  }
  for (int i = 0, n = this->lengths_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->lengths(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:chunkmaster.CalculateUploadSliceLengthsRsp)
}

::google::protobuf::uint8* CalculateUploadSliceLengthsRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chunkmaster.CalculateUploadSliceLengthsRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 lengths = 1;
  if (this->lengths_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _lengths_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->lengths_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chunkmaster.CalculateUploadSliceLengthsRsp)
  return target;
}

size_t CalculateUploadSliceLengthsRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chunkmaster.CalculateUploadSliceLengthsRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 lengths = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->lengths_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _lengths_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CalculateUploadSliceLengthsRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chunkmaster.CalculateUploadSliceLengthsRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const CalculateUploadSliceLengthsRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CalculateUploadSliceLengthsRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chunkmaster.CalculateUploadSliceLengthsRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chunkmaster.CalculateUploadSliceLengthsRsp)
    MergeFrom(*source);
  }
}

void CalculateUploadSliceLengthsRsp::MergeFrom(const CalculateUploadSliceLengthsRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chunkmaster.CalculateUploadSliceLengthsRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lengths_.MergeFrom(from.lengths_);
}

void CalculateUploadSliceLengthsRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chunkmaster.CalculateUploadSliceLengthsRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CalculateUploadSliceLengthsRsp::CopyFrom(const CalculateUploadSliceLengthsRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chunkmaster.CalculateUploadSliceLengthsRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CalculateUploadSliceLengthsRsp::IsInitialized() const {
  return true;
}

void CalculateUploadSliceLengthsRsp::Swap(CalculateUploadSliceLengthsRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CalculateUploadSliceLengthsRsp::InternalSwap(CalculateUploadSliceLengthsRsp* other) {
  using std::swap;
  lengths_.InternalSwap(&other->lengths_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CalculateUploadSliceLengthsRsp::GetMetadata() const {
  protobuf_chunkmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chunkmaster_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AllocateUploadSliceReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AllocateUploadSliceReq::kDataLengthFieldNumber;
const int AllocateUploadSliceReq::kReplicaPolicyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AllocateUploadSliceReq::AllocateUploadSliceReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_chunkmaster_2eproto::scc_info_AllocateUploadSliceReq.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chunkmaster.AllocateUploadSliceReq)
}
AllocateUploadSliceReq::AllocateUploadSliceReq(const AllocateUploadSliceReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&data_length_, &from.data_length_,
    static_cast<size_t>(reinterpret_cast<char*>(&replica_policy_) -
    reinterpret_cast<char*>(&data_length_)) + sizeof(replica_policy_));
  // @@protoc_insertion_point(copy_constructor:chunkmaster.AllocateUploadSliceReq)
}

void AllocateUploadSliceReq::SharedCtor() {
  ::memset(&data_length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&replica_policy_) -
      reinterpret_cast<char*>(&data_length_)) + sizeof(replica_policy_));
}

AllocateUploadSliceReq::~AllocateUploadSliceReq() {
  // @@protoc_insertion_point(destructor:chunkmaster.AllocateUploadSliceReq)
  SharedDtor();
}

void AllocateUploadSliceReq::SharedDtor() {
}

void AllocateUploadSliceReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AllocateUploadSliceReq::descriptor() {
  ::protobuf_chunkmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chunkmaster_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AllocateUploadSliceReq& AllocateUploadSliceReq::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_chunkmaster_2eproto::scc_info_AllocateUploadSliceReq.base);
  return *internal_default_instance();
}


void AllocateUploadSliceReq::Clear() {
// @@protoc_insertion_point(message_clear_start:chunkmaster.AllocateUploadSliceReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&data_length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&replica_policy_) -
      reinterpret_cast<char*>(&data_length_)) + sizeof(replica_policy_));
  _internal_metadata_.Clear();
}

bool AllocateUploadSliceReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chunkmaster.AllocateUploadSliceReq)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 data_length = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &data_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 replica_policy = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &replica_policy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chunkmaster.AllocateUploadSliceReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chunkmaster.AllocateUploadSliceReq)
  return false;
#undef DO_
}

void AllocateUploadSliceReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chunkmaster.AllocateUploadSliceReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 data_length = 1;
  if (this->data_length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->data_length(), output);
  }

  // uint32 replica_policy = 2;
  if (this->replica_policy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->replica_policy(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:chunkmaster.AllocateUploadSliceReq)
}

::google::protobuf::uint8* AllocateUploadSliceReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chunkmaster.AllocateUploadSliceReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 data_length = 1;
  if (this->data_length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->data_length(), target);
  }

  // uint32 replica_policy = 2;
  if (this->replica_policy() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->replica_policy(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chunkmaster.AllocateUploadSliceReq)
  return target;
}

size_t AllocateUploadSliceReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chunkmaster.AllocateUploadSliceReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 data_length = 1;
  if (this->data_length() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->data_length());
  }

  // uint32 replica_policy = 2;
  if (this->replica_policy() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->replica_policy());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AllocateUploadSliceReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chunkmaster.AllocateUploadSliceReq)
  GOOGLE_DCHECK_NE(&from, this);
  const AllocateUploadSliceReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AllocateUploadSliceReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chunkmaster.AllocateUploadSliceReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chunkmaster.AllocateUploadSliceReq)
    MergeFrom(*source);
  }
}

void AllocateUploadSliceReq::MergeFrom(const AllocateUploadSliceReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chunkmaster.AllocateUploadSliceReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data_length() != 0) {
    set_data_length(from.data_length());
  }
  if (from.replica_policy() != 0) {
    set_replica_policy(from.replica_policy());
  }
}

void AllocateUploadSliceReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chunkmaster.AllocateUploadSliceReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllocateUploadSliceReq::CopyFrom(const AllocateUploadSliceReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chunkmaster.AllocateUploadSliceReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllocateUploadSliceReq::IsInitialized() const {
  return true;
}

void AllocateUploadSliceReq::Swap(AllocateUploadSliceReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AllocateUploadSliceReq::InternalSwap(AllocateUploadSliceReq* other) {
  using std::swap;
  swap(data_length_, other->data_length_);
  swap(replica_policy_, other->replica_policy_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AllocateUploadSliceReq::GetMetadata() const {
  protobuf_chunkmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chunkmaster_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AllocateUploadSliceRsp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AllocateUploadSliceRsp::kLogicalSliceIdFieldNumber;
const int AllocateUploadSliceRsp::kPhysicalSliceIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AllocateUploadSliceRsp::AllocateUploadSliceRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_chunkmaster_2eproto::scc_info_AllocateUploadSliceRsp.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chunkmaster.AllocateUploadSliceRsp)
}
AllocateUploadSliceRsp::AllocateUploadSliceRsp(const AllocateUploadSliceRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      physical_slice_id_(from.physical_slice_id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  logical_slice_id_ = from.logical_slice_id_;
  // @@protoc_insertion_point(copy_constructor:chunkmaster.AllocateUploadSliceRsp)
}

void AllocateUploadSliceRsp::SharedCtor() {
  logical_slice_id_ = GOOGLE_ULONGLONG(0);
}

AllocateUploadSliceRsp::~AllocateUploadSliceRsp() {
  // @@protoc_insertion_point(destructor:chunkmaster.AllocateUploadSliceRsp)
  SharedDtor();
}

void AllocateUploadSliceRsp::SharedDtor() {
}

void AllocateUploadSliceRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AllocateUploadSliceRsp::descriptor() {
  ::protobuf_chunkmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chunkmaster_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AllocateUploadSliceRsp& AllocateUploadSliceRsp::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_chunkmaster_2eproto::scc_info_AllocateUploadSliceRsp.base);
  return *internal_default_instance();
}


void AllocateUploadSliceRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:chunkmaster.AllocateUploadSliceRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  physical_slice_id_.Clear();
  logical_slice_id_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool AllocateUploadSliceRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chunkmaster.AllocateUploadSliceRsp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 logical_slice_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &logical_slice_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 physical_slice_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_physical_slice_id())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 18u, input, this->mutable_physical_slice_id())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chunkmaster.AllocateUploadSliceRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chunkmaster.AllocateUploadSliceRsp)
  return false;
#undef DO_
}

void AllocateUploadSliceRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chunkmaster.AllocateUploadSliceRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 logical_slice_id = 1;
  if (this->logical_slice_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->logical_slice_id(), output);
  }

  // repeated uint64 physical_slice_id = 2;
  if (this->physical_slice_id_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _physical_slice_id_cached_byte_size_));
  }
  for (int i = 0, n = this->physical_slice_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->physical_slice_id(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:chunkmaster.AllocateUploadSliceRsp)
}

::google::protobuf::uint8* AllocateUploadSliceRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chunkmaster.AllocateUploadSliceRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 logical_slice_id = 1;
  if (this->logical_slice_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->logical_slice_id(), target);
  }

  // repeated uint64 physical_slice_id = 2;
  if (this->physical_slice_id_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _physical_slice_id_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->physical_slice_id_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chunkmaster.AllocateUploadSliceRsp)
  return target;
}

size_t AllocateUploadSliceRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chunkmaster.AllocateUploadSliceRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint64 physical_slice_id = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->physical_slice_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _physical_slice_id_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // uint64 logical_slice_id = 1;
  if (this->logical_slice_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->logical_slice_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AllocateUploadSliceRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chunkmaster.AllocateUploadSliceRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const AllocateUploadSliceRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AllocateUploadSliceRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chunkmaster.AllocateUploadSliceRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chunkmaster.AllocateUploadSliceRsp)
    MergeFrom(*source);
  }
}

void AllocateUploadSliceRsp::MergeFrom(const AllocateUploadSliceRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chunkmaster.AllocateUploadSliceRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  physical_slice_id_.MergeFrom(from.physical_slice_id_);
  if (from.logical_slice_id() != 0) {
    set_logical_slice_id(from.logical_slice_id());
  }
}

void AllocateUploadSliceRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chunkmaster.AllocateUploadSliceRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllocateUploadSliceRsp::CopyFrom(const AllocateUploadSliceRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chunkmaster.AllocateUploadSliceRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllocateUploadSliceRsp::IsInitialized() const {
  return true;
}

void AllocateUploadSliceRsp::Swap(AllocateUploadSliceRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AllocateUploadSliceRsp::InternalSwap(AllocateUploadSliceRsp* other) {
  using std::swap;
  physical_slice_id_.InternalSwap(&other->physical_slice_id_);
  swap(logical_slice_id_, other->logical_slice_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AllocateUploadSliceRsp::GetMetadata() const {
  protobuf_chunkmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chunkmaster_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FinishUploadSliceReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FinishUploadSliceReq::kPhysicalSliceIdFieldNumber;
const int FinishUploadSliceReq::kIsNormalExitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FinishUploadSliceReq::FinishUploadSliceReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_chunkmaster_2eproto::scc_info_FinishUploadSliceReq.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chunkmaster.FinishUploadSliceReq)
}
FinishUploadSliceReq::FinishUploadSliceReq(const FinishUploadSliceReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&physical_slice_id_, &from.physical_slice_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_normal_exit_) -
    reinterpret_cast<char*>(&physical_slice_id_)) + sizeof(is_normal_exit_));
  // @@protoc_insertion_point(copy_constructor:chunkmaster.FinishUploadSliceReq)
}

void FinishUploadSliceReq::SharedCtor() {
  ::memset(&physical_slice_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_normal_exit_) -
      reinterpret_cast<char*>(&physical_slice_id_)) + sizeof(is_normal_exit_));
}

FinishUploadSliceReq::~FinishUploadSliceReq() {
  // @@protoc_insertion_point(destructor:chunkmaster.FinishUploadSliceReq)
  SharedDtor();
}

void FinishUploadSliceReq::SharedDtor() {
}

void FinishUploadSliceReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FinishUploadSliceReq::descriptor() {
  ::protobuf_chunkmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chunkmaster_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FinishUploadSliceReq& FinishUploadSliceReq::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_chunkmaster_2eproto::scc_info_FinishUploadSliceReq.base);
  return *internal_default_instance();
}


void FinishUploadSliceReq::Clear() {
// @@protoc_insertion_point(message_clear_start:chunkmaster.FinishUploadSliceReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&physical_slice_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_normal_exit_) -
      reinterpret_cast<char*>(&physical_slice_id_)) + sizeof(is_normal_exit_));
  _internal_metadata_.Clear();
}

bool FinishUploadSliceReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chunkmaster.FinishUploadSliceReq)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 physical_slice_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &physical_slice_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_normal_exit = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_normal_exit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chunkmaster.FinishUploadSliceReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chunkmaster.FinishUploadSliceReq)
  return false;
#undef DO_
}

void FinishUploadSliceReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chunkmaster.FinishUploadSliceReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 physical_slice_id = 1;
  if (this->physical_slice_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->physical_slice_id(), output);
  }

  // bool is_normal_exit = 2;
  if (this->is_normal_exit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_normal_exit(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:chunkmaster.FinishUploadSliceReq)
}

::google::protobuf::uint8* FinishUploadSliceReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chunkmaster.FinishUploadSliceReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 physical_slice_id = 1;
  if (this->physical_slice_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->physical_slice_id(), target);
  }

  // bool is_normal_exit = 2;
  if (this->is_normal_exit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_normal_exit(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chunkmaster.FinishUploadSliceReq)
  return target;
}

size_t FinishUploadSliceReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chunkmaster.FinishUploadSliceReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 physical_slice_id = 1;
  if (this->physical_slice_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->physical_slice_id());
  }

  // bool is_normal_exit = 2;
  if (this->is_normal_exit() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FinishUploadSliceReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chunkmaster.FinishUploadSliceReq)
  GOOGLE_DCHECK_NE(&from, this);
  const FinishUploadSliceReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FinishUploadSliceReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chunkmaster.FinishUploadSliceReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chunkmaster.FinishUploadSliceReq)
    MergeFrom(*source);
  }
}

void FinishUploadSliceReq::MergeFrom(const FinishUploadSliceReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chunkmaster.FinishUploadSliceReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.physical_slice_id() != 0) {
    set_physical_slice_id(from.physical_slice_id());
  }
  if (from.is_normal_exit() != 0) {
    set_is_normal_exit(from.is_normal_exit());
  }
}

void FinishUploadSliceReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chunkmaster.FinishUploadSliceReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FinishUploadSliceReq::CopyFrom(const FinishUploadSliceReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chunkmaster.FinishUploadSliceReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FinishUploadSliceReq::IsInitialized() const {
  return true;
}

void FinishUploadSliceReq::Swap(FinishUploadSliceReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FinishUploadSliceReq::InternalSwap(FinishUploadSliceReq* other) {
  using std::swap;
  swap(physical_slice_id_, other->physical_slice_id_);
  swap(is_normal_exit_, other->is_normal_exit_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FinishUploadSliceReq::GetMetadata() const {
  protobuf_chunkmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chunkmaster_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FinishUploadSliceRsp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FinishUploadSliceRsp::FinishUploadSliceRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_chunkmaster_2eproto::scc_info_FinishUploadSliceRsp.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chunkmaster.FinishUploadSliceRsp)
}
FinishUploadSliceRsp::FinishUploadSliceRsp(const FinishUploadSliceRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:chunkmaster.FinishUploadSliceRsp)
}

void FinishUploadSliceRsp::SharedCtor() {
}

FinishUploadSliceRsp::~FinishUploadSliceRsp() {
  // @@protoc_insertion_point(destructor:chunkmaster.FinishUploadSliceRsp)
  SharedDtor();
}

void FinishUploadSliceRsp::SharedDtor() {
}

void FinishUploadSliceRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FinishUploadSliceRsp::descriptor() {
  ::protobuf_chunkmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chunkmaster_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FinishUploadSliceRsp& FinishUploadSliceRsp::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_chunkmaster_2eproto::scc_info_FinishUploadSliceRsp.base);
  return *internal_default_instance();
}


void FinishUploadSliceRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:chunkmaster.FinishUploadSliceRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool FinishUploadSliceRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chunkmaster.FinishUploadSliceRsp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:chunkmaster.FinishUploadSliceRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chunkmaster.FinishUploadSliceRsp)
  return false;
#undef DO_
}

void FinishUploadSliceRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chunkmaster.FinishUploadSliceRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:chunkmaster.FinishUploadSliceRsp)
}

::google::protobuf::uint8* FinishUploadSliceRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chunkmaster.FinishUploadSliceRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chunkmaster.FinishUploadSliceRsp)
  return target;
}

size_t FinishUploadSliceRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chunkmaster.FinishUploadSliceRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FinishUploadSliceRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chunkmaster.FinishUploadSliceRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const FinishUploadSliceRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FinishUploadSliceRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chunkmaster.FinishUploadSliceRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chunkmaster.FinishUploadSliceRsp)
    MergeFrom(*source);
  }
}

void FinishUploadSliceRsp::MergeFrom(const FinishUploadSliceRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chunkmaster.FinishUploadSliceRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void FinishUploadSliceRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chunkmaster.FinishUploadSliceRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FinishUploadSliceRsp::CopyFrom(const FinishUploadSliceRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chunkmaster.FinishUploadSliceRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FinishUploadSliceRsp::IsInitialized() const {
  return true;
}

void FinishUploadSliceRsp::Swap(FinishUploadSliceRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FinishUploadSliceRsp::InternalSwap(FinishUploadSliceRsp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FinishUploadSliceRsp::GetMetadata() const {
  protobuf_chunkmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chunkmaster_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BatchGetPhysicalSlicesReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BatchGetPhysicalSlicesReq::kLogicalSliceIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BatchGetPhysicalSlicesReq::BatchGetPhysicalSlicesReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_chunkmaster_2eproto::scc_info_BatchGetPhysicalSlicesReq.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chunkmaster.BatchGetPhysicalSlicesReq)
}
BatchGetPhysicalSlicesReq::BatchGetPhysicalSlicesReq(const BatchGetPhysicalSlicesReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      logical_slice_ids_(from.logical_slice_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:chunkmaster.BatchGetPhysicalSlicesReq)
}

void BatchGetPhysicalSlicesReq::SharedCtor() {
}

BatchGetPhysicalSlicesReq::~BatchGetPhysicalSlicesReq() {
  // @@protoc_insertion_point(destructor:chunkmaster.BatchGetPhysicalSlicesReq)
  SharedDtor();
}

void BatchGetPhysicalSlicesReq::SharedDtor() {
}

void BatchGetPhysicalSlicesReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* BatchGetPhysicalSlicesReq::descriptor() {
  ::protobuf_chunkmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chunkmaster_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BatchGetPhysicalSlicesReq& BatchGetPhysicalSlicesReq::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_chunkmaster_2eproto::scc_info_BatchGetPhysicalSlicesReq.base);
  return *internal_default_instance();
}


void BatchGetPhysicalSlicesReq::Clear() {
// @@protoc_insertion_point(message_clear_start:chunkmaster.BatchGetPhysicalSlicesReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  logical_slice_ids_.Clear();
  _internal_metadata_.Clear();
}

bool BatchGetPhysicalSlicesReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chunkmaster.BatchGetPhysicalSlicesReq)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 logical_slice_ids = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_logical_slice_ids())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 10u, input, this->mutable_logical_slice_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chunkmaster.BatchGetPhysicalSlicesReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chunkmaster.BatchGetPhysicalSlicesReq)
  return false;
#undef DO_
}

void BatchGetPhysicalSlicesReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chunkmaster.BatchGetPhysicalSlicesReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 logical_slice_ids = 1;
  if (this->logical_slice_ids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _logical_slice_ids_cached_byte_size_));
  }
  for (int i = 0, n = this->logical_slice_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->logical_slice_ids(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:chunkmaster.BatchGetPhysicalSlicesReq)
}

::google::protobuf::uint8* BatchGetPhysicalSlicesReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chunkmaster.BatchGetPhysicalSlicesReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 logical_slice_ids = 1;
  if (this->logical_slice_ids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _logical_slice_ids_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->logical_slice_ids_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chunkmaster.BatchGetPhysicalSlicesReq)
  return target;
}

size_t BatchGetPhysicalSlicesReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chunkmaster.BatchGetPhysicalSlicesReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint64 logical_slice_ids = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->logical_slice_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _logical_slice_ids_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BatchGetPhysicalSlicesReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chunkmaster.BatchGetPhysicalSlicesReq)
  GOOGLE_DCHECK_NE(&from, this);
  const BatchGetPhysicalSlicesReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BatchGetPhysicalSlicesReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chunkmaster.BatchGetPhysicalSlicesReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chunkmaster.BatchGetPhysicalSlicesReq)
    MergeFrom(*source);
  }
}

void BatchGetPhysicalSlicesReq::MergeFrom(const BatchGetPhysicalSlicesReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chunkmaster.BatchGetPhysicalSlicesReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  logical_slice_ids_.MergeFrom(from.logical_slice_ids_);
}

void BatchGetPhysicalSlicesReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chunkmaster.BatchGetPhysicalSlicesReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchGetPhysicalSlicesReq::CopyFrom(const BatchGetPhysicalSlicesReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chunkmaster.BatchGetPhysicalSlicesReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchGetPhysicalSlicesReq::IsInitialized() const {
  return true;
}

void BatchGetPhysicalSlicesReq::Swap(BatchGetPhysicalSlicesReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BatchGetPhysicalSlicesReq::InternalSwap(BatchGetPhysicalSlicesReq* other) {
  using std::swap;
  logical_slice_ids_.InternalSwap(&other->logical_slice_ids_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata BatchGetPhysicalSlicesReq::GetMetadata() const {
  protobuf_chunkmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chunkmaster_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BatchGetPhysicalSlicesRsp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BatchGetPhysicalSlicesRsp::kResultsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BatchGetPhysicalSlicesRsp::BatchGetPhysicalSlicesRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_chunkmaster_2eproto::scc_info_BatchGetPhysicalSlicesRsp.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chunkmaster.BatchGetPhysicalSlicesRsp)
}
BatchGetPhysicalSlicesRsp::BatchGetPhysicalSlicesRsp(const BatchGetPhysicalSlicesRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      results_(from.results_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:chunkmaster.BatchGetPhysicalSlicesRsp)
}

void BatchGetPhysicalSlicesRsp::SharedCtor() {
}

BatchGetPhysicalSlicesRsp::~BatchGetPhysicalSlicesRsp() {
  // @@protoc_insertion_point(destructor:chunkmaster.BatchGetPhysicalSlicesRsp)
  SharedDtor();
}

void BatchGetPhysicalSlicesRsp::SharedDtor() {
}

void BatchGetPhysicalSlicesRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* BatchGetPhysicalSlicesRsp::descriptor() {
  ::protobuf_chunkmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chunkmaster_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BatchGetPhysicalSlicesRsp& BatchGetPhysicalSlicesRsp::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_chunkmaster_2eproto::scc_info_BatchGetPhysicalSlicesRsp.base);
  return *internal_default_instance();
}


void BatchGetPhysicalSlicesRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:chunkmaster.BatchGetPhysicalSlicesRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  results_.Clear();
  _internal_metadata_.Clear();
}

bool BatchGetPhysicalSlicesRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chunkmaster.BatchGetPhysicalSlicesRsp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .chunkmaster.AllocateUploadSliceRsp results = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_results()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chunkmaster.BatchGetPhysicalSlicesRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chunkmaster.BatchGetPhysicalSlicesRsp)
  return false;
#undef DO_
}

void BatchGetPhysicalSlicesRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chunkmaster.BatchGetPhysicalSlicesRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .chunkmaster.AllocateUploadSliceRsp results = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->results_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->results(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:chunkmaster.BatchGetPhysicalSlicesRsp)
}

::google::protobuf::uint8* BatchGetPhysicalSlicesRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chunkmaster.BatchGetPhysicalSlicesRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .chunkmaster.AllocateUploadSliceRsp results = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->results_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->results(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chunkmaster.BatchGetPhysicalSlicesRsp)
  return target;
}

size_t BatchGetPhysicalSlicesRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chunkmaster.BatchGetPhysicalSlicesRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .chunkmaster.AllocateUploadSliceRsp results = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->results_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->results(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BatchGetPhysicalSlicesRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chunkmaster.BatchGetPhysicalSlicesRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const BatchGetPhysicalSlicesRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BatchGetPhysicalSlicesRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chunkmaster.BatchGetPhysicalSlicesRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chunkmaster.BatchGetPhysicalSlicesRsp)
    MergeFrom(*source);
  }
}

void BatchGetPhysicalSlicesRsp::MergeFrom(const BatchGetPhysicalSlicesRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chunkmaster.BatchGetPhysicalSlicesRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  results_.MergeFrom(from.results_);
}

void BatchGetPhysicalSlicesRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chunkmaster.BatchGetPhysicalSlicesRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchGetPhysicalSlicesRsp::CopyFrom(const BatchGetPhysicalSlicesRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chunkmaster.BatchGetPhysicalSlicesRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchGetPhysicalSlicesRsp::IsInitialized() const {
  return true;
}

void BatchGetPhysicalSlicesRsp::Swap(BatchGetPhysicalSlicesRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BatchGetPhysicalSlicesRsp::InternalSwap(BatchGetPhysicalSlicesRsp* other) {
  using std::swap;
  CastToBase(&results_)->InternalSwap(CastToBase(&other->results_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata BatchGetPhysicalSlicesRsp::GetMetadata() const {
  protobuf_chunkmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chunkmaster_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ChunkInformation::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChunkInformation::kChunkIdFieldNumber;
const int ChunkInformation::kLogicalUsedSpaceFieldNumber;
const int ChunkInformation::kActualUsedSpaceFieldNumber;
const int ChunkInformation::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChunkInformation::ChunkInformation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_chunkmaster_2eproto::scc_info_ChunkInformation.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chunkmaster.ChunkInformation)
}
ChunkInformation::ChunkInformation(const ChunkInformation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&chunk_id_, &from.chunk_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&chunk_id_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:chunkmaster.ChunkInformation)
}

void ChunkInformation::SharedCtor() {
  ::memset(&chunk_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&chunk_id_)) + sizeof(state_));
}

ChunkInformation::~ChunkInformation() {
  // @@protoc_insertion_point(destructor:chunkmaster.ChunkInformation)
  SharedDtor();
}

void ChunkInformation::SharedDtor() {
}

void ChunkInformation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ChunkInformation::descriptor() {
  ::protobuf_chunkmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chunkmaster_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChunkInformation& ChunkInformation::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_chunkmaster_2eproto::scc_info_ChunkInformation.base);
  return *internal_default_instance();
}


void ChunkInformation::Clear() {
// @@protoc_insertion_point(message_clear_start:chunkmaster.ChunkInformation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&chunk_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&chunk_id_)) + sizeof(state_));
  _internal_metadata_.Clear();
}

bool ChunkInformation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chunkmaster.ChunkInformation)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 chunk_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chunk_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 logical_used_space = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &logical_used_space_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 actual_used_space = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &actual_used_space_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .chunkmaster.ChunkState state = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::chunkmaster::ChunkState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chunkmaster.ChunkInformation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chunkmaster.ChunkInformation)
  return false;
#undef DO_
}

void ChunkInformation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chunkmaster.ChunkInformation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 chunk_id = 1;
  if (this->chunk_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->chunk_id(), output);
  }

  // uint32 logical_used_space = 2;
  if (this->logical_used_space() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->logical_used_space(), output);
  }

  // uint32 actual_used_space = 3;
  if (this->actual_used_space() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->actual_used_space(), output);
  }

  // .chunkmaster.ChunkState state = 4;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->state(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:chunkmaster.ChunkInformation)
}

::google::protobuf::uint8* ChunkInformation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chunkmaster.ChunkInformation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 chunk_id = 1;
  if (this->chunk_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->chunk_id(), target);
  }

  // uint32 logical_used_space = 2;
  if (this->logical_used_space() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->logical_used_space(), target);
  }

  // uint32 actual_used_space = 3;
  if (this->actual_used_space() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->actual_used_space(), target);
  }

  // .chunkmaster.ChunkState state = 4;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->state(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chunkmaster.ChunkInformation)
  return target;
}

size_t ChunkInformation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chunkmaster.ChunkInformation)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 chunk_id = 1;
  if (this->chunk_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->chunk_id());
  }

  // uint32 logical_used_space = 2;
  if (this->logical_used_space() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->logical_used_space());
  }

  // uint32 actual_used_space = 3;
  if (this->actual_used_space() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->actual_used_space());
  }

  // .chunkmaster.ChunkState state = 4;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChunkInformation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chunkmaster.ChunkInformation)
  GOOGLE_DCHECK_NE(&from, this);
  const ChunkInformation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChunkInformation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chunkmaster.ChunkInformation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chunkmaster.ChunkInformation)
    MergeFrom(*source);
  }
}

void ChunkInformation::MergeFrom(const ChunkInformation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chunkmaster.ChunkInformation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chunk_id() != 0) {
    set_chunk_id(from.chunk_id());
  }
  if (from.logical_used_space() != 0) {
    set_logical_used_space(from.logical_used_space());
  }
  if (from.actual_used_space() != 0) {
    set_actual_used_space(from.actual_used_space());
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
}

void ChunkInformation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chunkmaster.ChunkInformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChunkInformation::CopyFrom(const ChunkInformation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chunkmaster.ChunkInformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChunkInformation::IsInitialized() const {
  return true;
}

void ChunkInformation::Swap(ChunkInformation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChunkInformation::InternalSwap(ChunkInformation* other) {
  using std::swap;
  swap(chunk_id_, other->chunk_id_);
  swap(logical_used_space_, other->logical_used_space_);
  swap(actual_used_space_, other->actual_used_space_);
  swap(state_, other->state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ChunkInformation::GetMetadata() const {
  protobuf_chunkmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chunkmaster_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReportChunkInformationReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReportChunkInformationReq::kChunkInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReportChunkInformationReq::ReportChunkInformationReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_chunkmaster_2eproto::scc_info_ReportChunkInformationReq.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chunkmaster.ReportChunkInformationReq)
}
ReportChunkInformationReq::ReportChunkInformationReq(const ReportChunkInformationReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      chunk_info_(from.chunk_info_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:chunkmaster.ReportChunkInformationReq)
}

void ReportChunkInformationReq::SharedCtor() {
}

ReportChunkInformationReq::~ReportChunkInformationReq() {
  // @@protoc_insertion_point(destructor:chunkmaster.ReportChunkInformationReq)
  SharedDtor();
}

void ReportChunkInformationReq::SharedDtor() {
}

void ReportChunkInformationReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReportChunkInformationReq::descriptor() {
  ::protobuf_chunkmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chunkmaster_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReportChunkInformationReq& ReportChunkInformationReq::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_chunkmaster_2eproto::scc_info_ReportChunkInformationReq.base);
  return *internal_default_instance();
}


void ReportChunkInformationReq::Clear() {
// @@protoc_insertion_point(message_clear_start:chunkmaster.ReportChunkInformationReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chunk_info_.Clear();
  _internal_metadata_.Clear();
}

bool ReportChunkInformationReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chunkmaster.ReportChunkInformationReq)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .chunkmaster.ChunkInformation chunk_info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_chunk_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chunkmaster.ReportChunkInformationReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chunkmaster.ReportChunkInformationReq)
  return false;
#undef DO_
}

void ReportChunkInformationReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chunkmaster.ReportChunkInformationReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .chunkmaster.ChunkInformation chunk_info = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->chunk_info_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->chunk_info(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:chunkmaster.ReportChunkInformationReq)
}

::google::protobuf::uint8* ReportChunkInformationReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chunkmaster.ReportChunkInformationReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .chunkmaster.ChunkInformation chunk_info = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->chunk_info_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->chunk_info(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chunkmaster.ReportChunkInformationReq)
  return target;
}

size_t ReportChunkInformationReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chunkmaster.ReportChunkInformationReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .chunkmaster.ChunkInformation chunk_info = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->chunk_info_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->chunk_info(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReportChunkInformationReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chunkmaster.ReportChunkInformationReq)
  GOOGLE_DCHECK_NE(&from, this);
  const ReportChunkInformationReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReportChunkInformationReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chunkmaster.ReportChunkInformationReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chunkmaster.ReportChunkInformationReq)
    MergeFrom(*source);
  }
}

void ReportChunkInformationReq::MergeFrom(const ReportChunkInformationReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chunkmaster.ReportChunkInformationReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  chunk_info_.MergeFrom(from.chunk_info_);
}

void ReportChunkInformationReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chunkmaster.ReportChunkInformationReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportChunkInformationReq::CopyFrom(const ReportChunkInformationReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chunkmaster.ReportChunkInformationReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportChunkInformationReq::IsInitialized() const {
  return true;
}

void ReportChunkInformationReq::Swap(ReportChunkInformationReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReportChunkInformationReq::InternalSwap(ReportChunkInformationReq* other) {
  using std::swap;
  CastToBase(&chunk_info_)->InternalSwap(CastToBase(&other->chunk_info_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReportChunkInformationReq::GetMetadata() const {
  protobuf_chunkmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chunkmaster_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReportChunkInformationRsp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReportChunkInformationRsp::ReportChunkInformationRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_chunkmaster_2eproto::scc_info_ReportChunkInformationRsp.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chunkmaster.ReportChunkInformationRsp)
}
ReportChunkInformationRsp::ReportChunkInformationRsp(const ReportChunkInformationRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:chunkmaster.ReportChunkInformationRsp)
}

void ReportChunkInformationRsp::SharedCtor() {
}

ReportChunkInformationRsp::~ReportChunkInformationRsp() {
  // @@protoc_insertion_point(destructor:chunkmaster.ReportChunkInformationRsp)
  SharedDtor();
}

void ReportChunkInformationRsp::SharedDtor() {
}

void ReportChunkInformationRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReportChunkInformationRsp::descriptor() {
  ::protobuf_chunkmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chunkmaster_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReportChunkInformationRsp& ReportChunkInformationRsp::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_chunkmaster_2eproto::scc_info_ReportChunkInformationRsp.base);
  return *internal_default_instance();
}


void ReportChunkInformationRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:chunkmaster.ReportChunkInformationRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool ReportChunkInformationRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chunkmaster.ReportChunkInformationRsp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:chunkmaster.ReportChunkInformationRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chunkmaster.ReportChunkInformationRsp)
  return false;
#undef DO_
}

void ReportChunkInformationRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chunkmaster.ReportChunkInformationRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:chunkmaster.ReportChunkInformationRsp)
}

::google::protobuf::uint8* ReportChunkInformationRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chunkmaster.ReportChunkInformationRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chunkmaster.ReportChunkInformationRsp)
  return target;
}

size_t ReportChunkInformationRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chunkmaster.ReportChunkInformationRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReportChunkInformationRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chunkmaster.ReportChunkInformationRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const ReportChunkInformationRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReportChunkInformationRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chunkmaster.ReportChunkInformationRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chunkmaster.ReportChunkInformationRsp)
    MergeFrom(*source);
  }
}

void ReportChunkInformationRsp::MergeFrom(const ReportChunkInformationRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chunkmaster.ReportChunkInformationRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ReportChunkInformationRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chunkmaster.ReportChunkInformationRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportChunkInformationRsp::CopyFrom(const ReportChunkInformationRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chunkmaster.ReportChunkInformationRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportChunkInformationRsp::IsInitialized() const {
  return true;
}

void ReportChunkInformationRsp::Swap(ReportChunkInformationRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReportChunkInformationRsp::InternalSwap(ReportChunkInformationRsp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReportChunkInformationRsp::GetMetadata() const {
  protobuf_chunkmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chunkmaster_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace chunkmaster
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chunkmaster::CalculateUploadSliceLengthsReq* Arena::CreateMaybeMessage< ::chunkmaster::CalculateUploadSliceLengthsReq >(Arena* arena) {
  return Arena::CreateInternal< ::chunkmaster::CalculateUploadSliceLengthsReq >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chunkmaster::CalculateUploadSliceLengthsRsp* Arena::CreateMaybeMessage< ::chunkmaster::CalculateUploadSliceLengthsRsp >(Arena* arena) {
  return Arena::CreateInternal< ::chunkmaster::CalculateUploadSliceLengthsRsp >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chunkmaster::AllocateUploadSliceReq* Arena::CreateMaybeMessage< ::chunkmaster::AllocateUploadSliceReq >(Arena* arena) {
  return Arena::CreateInternal< ::chunkmaster::AllocateUploadSliceReq >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chunkmaster::AllocateUploadSliceRsp* Arena::CreateMaybeMessage< ::chunkmaster::AllocateUploadSliceRsp >(Arena* arena) {
  return Arena::CreateInternal< ::chunkmaster::AllocateUploadSliceRsp >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chunkmaster::FinishUploadSliceReq* Arena::CreateMaybeMessage< ::chunkmaster::FinishUploadSliceReq >(Arena* arena) {
  return Arena::CreateInternal< ::chunkmaster::FinishUploadSliceReq >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chunkmaster::FinishUploadSliceRsp* Arena::CreateMaybeMessage< ::chunkmaster::FinishUploadSliceRsp >(Arena* arena) {
  return Arena::CreateInternal< ::chunkmaster::FinishUploadSliceRsp >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chunkmaster::BatchGetPhysicalSlicesReq* Arena::CreateMaybeMessage< ::chunkmaster::BatchGetPhysicalSlicesReq >(Arena* arena) {
  return Arena::CreateInternal< ::chunkmaster::BatchGetPhysicalSlicesReq >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chunkmaster::BatchGetPhysicalSlicesRsp* Arena::CreateMaybeMessage< ::chunkmaster::BatchGetPhysicalSlicesRsp >(Arena* arena) {
  return Arena::CreateInternal< ::chunkmaster::BatchGetPhysicalSlicesRsp >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chunkmaster::ChunkInformation* Arena::CreateMaybeMessage< ::chunkmaster::ChunkInformation >(Arena* arena) {
  return Arena::CreateInternal< ::chunkmaster::ChunkInformation >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chunkmaster::ReportChunkInformationReq* Arena::CreateMaybeMessage< ::chunkmaster::ReportChunkInformationReq >(Arena* arena) {
  return Arena::CreateInternal< ::chunkmaster::ReportChunkInformationReq >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chunkmaster::ReportChunkInformationRsp* Arena::CreateMaybeMessage< ::chunkmaster::ReportChunkInformationRsp >(Arena* arena) {
  return Arena::CreateInternal< ::chunkmaster::ReportChunkInformationRsp >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
