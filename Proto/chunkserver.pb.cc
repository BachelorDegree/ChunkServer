// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chunkserver.proto

#include "chunkserver.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace chunkserver {
class SetChunkStateReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SetChunkStateReq>
      _instance;
} _SetChunkStateReq_default_instance_;
class SetChunkStateRspDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SetChunkStateRsp>
      _instance;
} _SetChunkStateRsp_default_instance_;
class AllocateInodeReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AllocateInodeReq>
      _instance;
} _AllocateInodeReq_default_instance_;
class AllocateInodeRspDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AllocateInodeRsp>
      _instance;
} _AllocateInodeRsp_default_instance_;
class ReadSliceReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReadSliceReq>
      _instance;
} _ReadSliceReq_default_instance_;
class ReadSliceRspDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReadSliceRsp>
      _instance;
} _ReadSliceRsp_default_instance_;
class WriteSliceReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WriteSliceReq>
      _instance;
} _WriteSliceReq_default_instance_;
class WriteSliceRspDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WriteSliceRsp>
      _instance;
} _WriteSliceRsp_default_instance_;
}  // namespace chunkserver
namespace protobuf_chunkserver_2eproto {
static void InitDefaultsSetChunkStateReq() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chunkserver::_SetChunkStateReq_default_instance_;
    new (ptr) ::chunkserver::SetChunkStateReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chunkserver::SetChunkStateReq::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SetChunkStateReq =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSetChunkStateReq}, {}};

static void InitDefaultsSetChunkStateRsp() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chunkserver::_SetChunkStateRsp_default_instance_;
    new (ptr) ::chunkserver::SetChunkStateRsp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chunkserver::SetChunkStateRsp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SetChunkStateRsp =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSetChunkStateRsp}, {}};

static void InitDefaultsAllocateInodeReq() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chunkserver::_AllocateInodeReq_default_instance_;
    new (ptr) ::chunkserver::AllocateInodeReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chunkserver::AllocateInodeReq::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AllocateInodeReq =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAllocateInodeReq}, {}};

static void InitDefaultsAllocateInodeRsp() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chunkserver::_AllocateInodeRsp_default_instance_;
    new (ptr) ::chunkserver::AllocateInodeRsp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chunkserver::AllocateInodeRsp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AllocateInodeRsp =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAllocateInodeRsp}, {}};

static void InitDefaultsReadSliceReq() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chunkserver::_ReadSliceReq_default_instance_;
    new (ptr) ::chunkserver::ReadSliceReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chunkserver::ReadSliceReq::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ReadSliceReq =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsReadSliceReq}, {}};

static void InitDefaultsReadSliceRsp() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chunkserver::_ReadSliceRsp_default_instance_;
    new (ptr) ::chunkserver::ReadSliceRsp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chunkserver::ReadSliceRsp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ReadSliceRsp =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsReadSliceRsp}, {}};

static void InitDefaultsWriteSliceReq() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chunkserver::_WriteSliceReq_default_instance_;
    new (ptr) ::chunkserver::WriteSliceReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chunkserver::WriteSliceReq::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_WriteSliceReq =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsWriteSliceReq}, {}};

static void InitDefaultsWriteSliceRsp() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chunkserver::_WriteSliceRsp_default_instance_;
    new (ptr) ::chunkserver::WriteSliceRsp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chunkserver::WriteSliceRsp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_WriteSliceRsp =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsWriteSliceRsp}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_SetChunkStateReq.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SetChunkStateRsp.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AllocateInodeReq.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AllocateInodeRsp.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReadSliceReq.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReadSliceRsp.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WriteSliceReq.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WriteSliceRsp.base);
}

::google::protobuf::Metadata file_level_metadata[8];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chunkserver::SetChunkStateReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chunkserver::SetChunkStateReq, chunk_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chunkserver::SetChunkStateReq, state_to_set_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chunkserver::SetChunkStateRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chunkserver::AllocateInodeReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chunkserver::AllocateInodeReq, chunk_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chunkserver::AllocateInodeReq, data_length_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chunkserver::AllocateInodeRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chunkserver::AllocateInodeRsp, slice_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chunkserver::ReadSliceReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chunkserver::ReadSliceReq, slice_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chunkserver::ReadSliceReq, offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chunkserver::ReadSliceReq, length_to_read_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chunkserver::ReadSliceRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chunkserver::ReadSliceRsp, data_length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chunkserver::ReadSliceRsp, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chunkserver::WriteSliceReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chunkserver::WriteSliceReq, slice_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chunkserver::WriteSliceReq, offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chunkserver::WriteSliceReq, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chunkserver::WriteSliceRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::chunkserver::SetChunkStateReq)},
  { 7, -1, sizeof(::chunkserver::SetChunkStateRsp)},
  { 12, -1, sizeof(::chunkserver::AllocateInodeReq)},
  { 19, -1, sizeof(::chunkserver::AllocateInodeRsp)},
  { 25, -1, sizeof(::chunkserver::ReadSliceReq)},
  { 33, -1, sizeof(::chunkserver::ReadSliceRsp)},
  { 40, -1, sizeof(::chunkserver::WriteSliceReq)},
  { 48, -1, sizeof(::chunkserver::WriteSliceRsp)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::chunkserver::_SetChunkStateReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chunkserver::_SetChunkStateRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chunkserver::_AllocateInodeReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chunkserver::_AllocateInodeRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chunkserver::_ReadSliceReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chunkserver::_ReadSliceRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chunkserver::_WriteSliceReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chunkserver::_WriteSliceRsp_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "chunkserver.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 8);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\021chunkserver.proto\022\013chunkserver\":\n\020SetC"
      "hunkStateReq\022\020\n\010chunk_id\030\001 \001(\004\022\024\n\014state_"
      "to_set\030\002 \001(\r\"\022\n\020SetChunkStateRsp\"9\n\020Allo"
      "cateInodeReq\022\020\n\010chunk_id\030\001 \001(\004\022\023\n\013data_l"
      "ength\030\002 \001(\r\"$\n\020AllocateInodeRsp\022\020\n\010slice"
      "_id\030\001 \001(\004\"H\n\014ReadSliceReq\022\020\n\010slice_id\030\001 "
      "\001(\004\022\016\n\006offset\030\002 \001(\r\022\026\n\016length_to_read\030\003 "
      "\001(\r\"1\n\014ReadSliceRsp\022\023\n\013data_length\030\001 \001(\r"
      "\022\014\n\004data\030\002 \001(\014\"\?\n\rWriteSliceReq\022\020\n\010slice"
      "_id\030\001 \001(\004\022\016\n\006offset\030\002 \001(\r\022\014\n\004data\030\003 \001(\014\""
      "\017\n\rWriteSliceRsp2\273\002\n\022ChunkServerService\022"
      "M\n\rSetChunkState\022\035.chunkserver.SetChunkS"
      "tateReq\032\035.chunkserver.SetChunkStateRsp\022M"
      "\n\rAllocateInode\022\035.chunkserver.AllocateIn"
      "odeReq\032\035.chunkserver.AllocateInodeRsp\022A\n"
      "\tReadSlice\022\031.chunkserver.ReadSliceReq\032\031."
      "chunkserver.ReadSliceRsp\022D\n\nWriteSlice\022\032"
      ".chunkserver.WriteSliceReq\032\032.chunkserver"
      ".WriteSliceRspb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 742);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "chunkserver.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_chunkserver_2eproto
namespace chunkserver {

// ===================================================================

void SetChunkStateReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetChunkStateReq::kChunkIdFieldNumber;
const int SetChunkStateReq::kStateToSetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetChunkStateReq::SetChunkStateReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_chunkserver_2eproto::scc_info_SetChunkStateReq.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chunkserver.SetChunkStateReq)
}
SetChunkStateReq::SetChunkStateReq(const SetChunkStateReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&chunk_id_, &from.chunk_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_to_set_) -
    reinterpret_cast<char*>(&chunk_id_)) + sizeof(state_to_set_));
  // @@protoc_insertion_point(copy_constructor:chunkserver.SetChunkStateReq)
}

void SetChunkStateReq::SharedCtor() {
  ::memset(&chunk_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_to_set_) -
      reinterpret_cast<char*>(&chunk_id_)) + sizeof(state_to_set_));
}

SetChunkStateReq::~SetChunkStateReq() {
  // @@protoc_insertion_point(destructor:chunkserver.SetChunkStateReq)
  SharedDtor();
}

void SetChunkStateReq::SharedDtor() {
}

void SetChunkStateReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SetChunkStateReq::descriptor() {
  ::protobuf_chunkserver_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chunkserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SetChunkStateReq& SetChunkStateReq::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_chunkserver_2eproto::scc_info_SetChunkStateReq.base);
  return *internal_default_instance();
}


void SetChunkStateReq::Clear() {
// @@protoc_insertion_point(message_clear_start:chunkserver.SetChunkStateReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&chunk_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_to_set_) -
      reinterpret_cast<char*>(&chunk_id_)) + sizeof(state_to_set_));
  _internal_metadata_.Clear();
}

bool SetChunkStateReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chunkserver.SetChunkStateReq)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 chunk_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chunk_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 state_to_set = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_to_set_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chunkserver.SetChunkStateReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chunkserver.SetChunkStateReq)
  return false;
#undef DO_
}

void SetChunkStateReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chunkserver.SetChunkStateReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 chunk_id = 1;
  if (this->chunk_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->chunk_id(), output);
  }

  // uint32 state_to_set = 2;
  if (this->state_to_set() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->state_to_set(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:chunkserver.SetChunkStateReq)
}

::google::protobuf::uint8* SetChunkStateReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chunkserver.SetChunkStateReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 chunk_id = 1;
  if (this->chunk_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->chunk_id(), target);
  }

  // uint32 state_to_set = 2;
  if (this->state_to_set() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->state_to_set(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chunkserver.SetChunkStateReq)
  return target;
}

size_t SetChunkStateReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chunkserver.SetChunkStateReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 chunk_id = 1;
  if (this->chunk_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->chunk_id());
  }

  // uint32 state_to_set = 2;
  if (this->state_to_set() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->state_to_set());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetChunkStateReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chunkserver.SetChunkStateReq)
  GOOGLE_DCHECK_NE(&from, this);
  const SetChunkStateReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SetChunkStateReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chunkserver.SetChunkStateReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chunkserver.SetChunkStateReq)
    MergeFrom(*source);
  }
}

void SetChunkStateReq::MergeFrom(const SetChunkStateReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chunkserver.SetChunkStateReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chunk_id() != 0) {
    set_chunk_id(from.chunk_id());
  }
  if (from.state_to_set() != 0) {
    set_state_to_set(from.state_to_set());
  }
}

void SetChunkStateReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chunkserver.SetChunkStateReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetChunkStateReq::CopyFrom(const SetChunkStateReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chunkserver.SetChunkStateReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetChunkStateReq::IsInitialized() const {
  return true;
}

void SetChunkStateReq::Swap(SetChunkStateReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetChunkStateReq::InternalSwap(SetChunkStateReq* other) {
  using std::swap;
  swap(chunk_id_, other->chunk_id_);
  swap(state_to_set_, other->state_to_set_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SetChunkStateReq::GetMetadata() const {
  protobuf_chunkserver_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chunkserver_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SetChunkStateRsp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetChunkStateRsp::SetChunkStateRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_chunkserver_2eproto::scc_info_SetChunkStateRsp.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chunkserver.SetChunkStateRsp)
}
SetChunkStateRsp::SetChunkStateRsp(const SetChunkStateRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:chunkserver.SetChunkStateRsp)
}

void SetChunkStateRsp::SharedCtor() {
}

SetChunkStateRsp::~SetChunkStateRsp() {
  // @@protoc_insertion_point(destructor:chunkserver.SetChunkStateRsp)
  SharedDtor();
}

void SetChunkStateRsp::SharedDtor() {
}

void SetChunkStateRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SetChunkStateRsp::descriptor() {
  ::protobuf_chunkserver_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chunkserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SetChunkStateRsp& SetChunkStateRsp::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_chunkserver_2eproto::scc_info_SetChunkStateRsp.base);
  return *internal_default_instance();
}


void SetChunkStateRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:chunkserver.SetChunkStateRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool SetChunkStateRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chunkserver.SetChunkStateRsp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:chunkserver.SetChunkStateRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chunkserver.SetChunkStateRsp)
  return false;
#undef DO_
}

void SetChunkStateRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chunkserver.SetChunkStateRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:chunkserver.SetChunkStateRsp)
}

::google::protobuf::uint8* SetChunkStateRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chunkserver.SetChunkStateRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chunkserver.SetChunkStateRsp)
  return target;
}

size_t SetChunkStateRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chunkserver.SetChunkStateRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetChunkStateRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chunkserver.SetChunkStateRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const SetChunkStateRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SetChunkStateRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chunkserver.SetChunkStateRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chunkserver.SetChunkStateRsp)
    MergeFrom(*source);
  }
}

void SetChunkStateRsp::MergeFrom(const SetChunkStateRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chunkserver.SetChunkStateRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SetChunkStateRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chunkserver.SetChunkStateRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetChunkStateRsp::CopyFrom(const SetChunkStateRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chunkserver.SetChunkStateRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetChunkStateRsp::IsInitialized() const {
  return true;
}

void SetChunkStateRsp::Swap(SetChunkStateRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetChunkStateRsp::InternalSwap(SetChunkStateRsp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SetChunkStateRsp::GetMetadata() const {
  protobuf_chunkserver_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chunkserver_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AllocateInodeReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AllocateInodeReq::kChunkIdFieldNumber;
const int AllocateInodeReq::kDataLengthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AllocateInodeReq::AllocateInodeReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_chunkserver_2eproto::scc_info_AllocateInodeReq.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chunkserver.AllocateInodeReq)
}
AllocateInodeReq::AllocateInodeReq(const AllocateInodeReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&chunk_id_, &from.chunk_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&data_length_) -
    reinterpret_cast<char*>(&chunk_id_)) + sizeof(data_length_));
  // @@protoc_insertion_point(copy_constructor:chunkserver.AllocateInodeReq)
}

void AllocateInodeReq::SharedCtor() {
  ::memset(&chunk_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_length_) -
      reinterpret_cast<char*>(&chunk_id_)) + sizeof(data_length_));
}

AllocateInodeReq::~AllocateInodeReq() {
  // @@protoc_insertion_point(destructor:chunkserver.AllocateInodeReq)
  SharedDtor();
}

void AllocateInodeReq::SharedDtor() {
}

void AllocateInodeReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AllocateInodeReq::descriptor() {
  ::protobuf_chunkserver_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chunkserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AllocateInodeReq& AllocateInodeReq::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_chunkserver_2eproto::scc_info_AllocateInodeReq.base);
  return *internal_default_instance();
}


void AllocateInodeReq::Clear() {
// @@protoc_insertion_point(message_clear_start:chunkserver.AllocateInodeReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&chunk_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_length_) -
      reinterpret_cast<char*>(&chunk_id_)) + sizeof(data_length_));
  _internal_metadata_.Clear();
}

bool AllocateInodeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chunkserver.AllocateInodeReq)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 chunk_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chunk_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 data_length = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chunkserver.AllocateInodeReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chunkserver.AllocateInodeReq)
  return false;
#undef DO_
}

void AllocateInodeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chunkserver.AllocateInodeReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 chunk_id = 1;
  if (this->chunk_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->chunk_id(), output);
  }

  // uint32 data_length = 2;
  if (this->data_length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->data_length(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:chunkserver.AllocateInodeReq)
}

::google::protobuf::uint8* AllocateInodeReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chunkserver.AllocateInodeReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 chunk_id = 1;
  if (this->chunk_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->chunk_id(), target);
  }

  // uint32 data_length = 2;
  if (this->data_length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->data_length(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chunkserver.AllocateInodeReq)
  return target;
}

size_t AllocateInodeReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chunkserver.AllocateInodeReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 chunk_id = 1;
  if (this->chunk_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->chunk_id());
  }

  // uint32 data_length = 2;
  if (this->data_length() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->data_length());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AllocateInodeReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chunkserver.AllocateInodeReq)
  GOOGLE_DCHECK_NE(&from, this);
  const AllocateInodeReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AllocateInodeReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chunkserver.AllocateInodeReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chunkserver.AllocateInodeReq)
    MergeFrom(*source);
  }
}

void AllocateInodeReq::MergeFrom(const AllocateInodeReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chunkserver.AllocateInodeReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chunk_id() != 0) {
    set_chunk_id(from.chunk_id());
  }
  if (from.data_length() != 0) {
    set_data_length(from.data_length());
  }
}

void AllocateInodeReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chunkserver.AllocateInodeReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllocateInodeReq::CopyFrom(const AllocateInodeReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chunkserver.AllocateInodeReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllocateInodeReq::IsInitialized() const {
  return true;
}

void AllocateInodeReq::Swap(AllocateInodeReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AllocateInodeReq::InternalSwap(AllocateInodeReq* other) {
  using std::swap;
  swap(chunk_id_, other->chunk_id_);
  swap(data_length_, other->data_length_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AllocateInodeReq::GetMetadata() const {
  protobuf_chunkserver_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chunkserver_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AllocateInodeRsp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AllocateInodeRsp::kSliceIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AllocateInodeRsp::AllocateInodeRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_chunkserver_2eproto::scc_info_AllocateInodeRsp.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chunkserver.AllocateInodeRsp)
}
AllocateInodeRsp::AllocateInodeRsp(const AllocateInodeRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  slice_id_ = from.slice_id_;
  // @@protoc_insertion_point(copy_constructor:chunkserver.AllocateInodeRsp)
}

void AllocateInodeRsp::SharedCtor() {
  slice_id_ = GOOGLE_ULONGLONG(0);
}

AllocateInodeRsp::~AllocateInodeRsp() {
  // @@protoc_insertion_point(destructor:chunkserver.AllocateInodeRsp)
  SharedDtor();
}

void AllocateInodeRsp::SharedDtor() {
}

void AllocateInodeRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AllocateInodeRsp::descriptor() {
  ::protobuf_chunkserver_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chunkserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AllocateInodeRsp& AllocateInodeRsp::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_chunkserver_2eproto::scc_info_AllocateInodeRsp.base);
  return *internal_default_instance();
}


void AllocateInodeRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:chunkserver.AllocateInodeRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  slice_id_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool AllocateInodeRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chunkserver.AllocateInodeRsp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 slice_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &slice_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chunkserver.AllocateInodeRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chunkserver.AllocateInodeRsp)
  return false;
#undef DO_
}

void AllocateInodeRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chunkserver.AllocateInodeRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 slice_id = 1;
  if (this->slice_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->slice_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:chunkserver.AllocateInodeRsp)
}

::google::protobuf::uint8* AllocateInodeRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chunkserver.AllocateInodeRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 slice_id = 1;
  if (this->slice_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->slice_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chunkserver.AllocateInodeRsp)
  return target;
}

size_t AllocateInodeRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chunkserver.AllocateInodeRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 slice_id = 1;
  if (this->slice_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->slice_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AllocateInodeRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chunkserver.AllocateInodeRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const AllocateInodeRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AllocateInodeRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chunkserver.AllocateInodeRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chunkserver.AllocateInodeRsp)
    MergeFrom(*source);
  }
}

void AllocateInodeRsp::MergeFrom(const AllocateInodeRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chunkserver.AllocateInodeRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.slice_id() != 0) {
    set_slice_id(from.slice_id());
  }
}

void AllocateInodeRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chunkserver.AllocateInodeRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllocateInodeRsp::CopyFrom(const AllocateInodeRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chunkserver.AllocateInodeRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllocateInodeRsp::IsInitialized() const {
  return true;
}

void AllocateInodeRsp::Swap(AllocateInodeRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AllocateInodeRsp::InternalSwap(AllocateInodeRsp* other) {
  using std::swap;
  swap(slice_id_, other->slice_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AllocateInodeRsp::GetMetadata() const {
  protobuf_chunkserver_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chunkserver_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReadSliceReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReadSliceReq::kSliceIdFieldNumber;
const int ReadSliceReq::kOffsetFieldNumber;
const int ReadSliceReq::kLengthToReadFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReadSliceReq::ReadSliceReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_chunkserver_2eproto::scc_info_ReadSliceReq.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chunkserver.ReadSliceReq)
}
ReadSliceReq::ReadSliceReq(const ReadSliceReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&slice_id_, &from.slice_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&length_to_read_) -
    reinterpret_cast<char*>(&slice_id_)) + sizeof(length_to_read_));
  // @@protoc_insertion_point(copy_constructor:chunkserver.ReadSliceReq)
}

void ReadSliceReq::SharedCtor() {
  ::memset(&slice_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&length_to_read_) -
      reinterpret_cast<char*>(&slice_id_)) + sizeof(length_to_read_));
}

ReadSliceReq::~ReadSliceReq() {
  // @@protoc_insertion_point(destructor:chunkserver.ReadSliceReq)
  SharedDtor();
}

void ReadSliceReq::SharedDtor() {
}

void ReadSliceReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReadSliceReq::descriptor() {
  ::protobuf_chunkserver_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chunkserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReadSliceReq& ReadSliceReq::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_chunkserver_2eproto::scc_info_ReadSliceReq.base);
  return *internal_default_instance();
}


void ReadSliceReq::Clear() {
// @@protoc_insertion_point(message_clear_start:chunkserver.ReadSliceReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&slice_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&length_to_read_) -
      reinterpret_cast<char*>(&slice_id_)) + sizeof(length_to_read_));
  _internal_metadata_.Clear();
}

bool ReadSliceReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chunkserver.ReadSliceReq)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 slice_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &slice_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 offset = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 length_to_read = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &length_to_read_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chunkserver.ReadSliceReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chunkserver.ReadSliceReq)
  return false;
#undef DO_
}

void ReadSliceReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chunkserver.ReadSliceReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 slice_id = 1;
  if (this->slice_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->slice_id(), output);
  }

  // uint32 offset = 2;
  if (this->offset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->offset(), output);
  }

  // uint32 length_to_read = 3;
  if (this->length_to_read() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->length_to_read(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:chunkserver.ReadSliceReq)
}

::google::protobuf::uint8* ReadSliceReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chunkserver.ReadSliceReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 slice_id = 1;
  if (this->slice_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->slice_id(), target);
  }

  // uint32 offset = 2;
  if (this->offset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->offset(), target);
  }

  // uint32 length_to_read = 3;
  if (this->length_to_read() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->length_to_read(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chunkserver.ReadSliceReq)
  return target;
}

size_t ReadSliceReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chunkserver.ReadSliceReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 slice_id = 1;
  if (this->slice_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->slice_id());
  }

  // uint32 offset = 2;
  if (this->offset() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->offset());
  }

  // uint32 length_to_read = 3;
  if (this->length_to_read() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->length_to_read());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReadSliceReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chunkserver.ReadSliceReq)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadSliceReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReadSliceReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chunkserver.ReadSliceReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chunkserver.ReadSliceReq)
    MergeFrom(*source);
  }
}

void ReadSliceReq::MergeFrom(const ReadSliceReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chunkserver.ReadSliceReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.slice_id() != 0) {
    set_slice_id(from.slice_id());
  }
  if (from.offset() != 0) {
    set_offset(from.offset());
  }
  if (from.length_to_read() != 0) {
    set_length_to_read(from.length_to_read());
  }
}

void ReadSliceReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chunkserver.ReadSliceReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadSliceReq::CopyFrom(const ReadSliceReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chunkserver.ReadSliceReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadSliceReq::IsInitialized() const {
  return true;
}

void ReadSliceReq::Swap(ReadSliceReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReadSliceReq::InternalSwap(ReadSliceReq* other) {
  using std::swap;
  swap(slice_id_, other->slice_id_);
  swap(offset_, other->offset_);
  swap(length_to_read_, other->length_to_read_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReadSliceReq::GetMetadata() const {
  protobuf_chunkserver_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chunkserver_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReadSliceRsp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReadSliceRsp::kDataLengthFieldNumber;
const int ReadSliceRsp::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReadSliceRsp::ReadSliceRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_chunkserver_2eproto::scc_info_ReadSliceRsp.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chunkserver.ReadSliceRsp)
}
ReadSliceRsp::ReadSliceRsp(const ReadSliceRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  data_length_ = from.data_length_;
  // @@protoc_insertion_point(copy_constructor:chunkserver.ReadSliceRsp)
}

void ReadSliceRsp::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_length_ = 0u;
}

ReadSliceRsp::~ReadSliceRsp() {
  // @@protoc_insertion_point(destructor:chunkserver.ReadSliceRsp)
  SharedDtor();
}

void ReadSliceRsp::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ReadSliceRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReadSliceRsp::descriptor() {
  ::protobuf_chunkserver_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chunkserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReadSliceRsp& ReadSliceRsp::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_chunkserver_2eproto::scc_info_ReadSliceRsp.base);
  return *internal_default_instance();
}


void ReadSliceRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:chunkserver.ReadSliceRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_length_ = 0u;
  _internal_metadata_.Clear();
}

bool ReadSliceRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chunkserver.ReadSliceRsp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 data_length = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chunkserver.ReadSliceRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chunkserver.ReadSliceRsp)
  return false;
#undef DO_
}

void ReadSliceRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chunkserver.ReadSliceRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 data_length = 1;
  if (this->data_length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->data_length(), output);
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:chunkserver.ReadSliceRsp)
}

::google::protobuf::uint8* ReadSliceRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chunkserver.ReadSliceRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 data_length = 1;
  if (this->data_length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->data_length(), target);
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chunkserver.ReadSliceRsp)
  return target;
}

size_t ReadSliceRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chunkserver.ReadSliceRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // uint32 data_length = 1;
  if (this->data_length() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->data_length());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReadSliceRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chunkserver.ReadSliceRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadSliceRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReadSliceRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chunkserver.ReadSliceRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chunkserver.ReadSliceRsp)
    MergeFrom(*source);
  }
}

void ReadSliceRsp::MergeFrom(const ReadSliceRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chunkserver.ReadSliceRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.data_length() != 0) {
    set_data_length(from.data_length());
  }
}

void ReadSliceRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chunkserver.ReadSliceRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadSliceRsp::CopyFrom(const ReadSliceRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chunkserver.ReadSliceRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadSliceRsp::IsInitialized() const {
  return true;
}

void ReadSliceRsp::Swap(ReadSliceRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReadSliceRsp::InternalSwap(ReadSliceRsp* other) {
  using std::swap;
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(data_length_, other->data_length_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReadSliceRsp::GetMetadata() const {
  protobuf_chunkserver_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chunkserver_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void WriteSliceReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WriteSliceReq::kSliceIdFieldNumber;
const int WriteSliceReq::kOffsetFieldNumber;
const int WriteSliceReq::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WriteSliceReq::WriteSliceReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_chunkserver_2eproto::scc_info_WriteSliceReq.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chunkserver.WriteSliceReq)
}
WriteSliceReq::WriteSliceReq(const WriteSliceReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  ::memcpy(&slice_id_, &from.slice_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&offset_) -
    reinterpret_cast<char*>(&slice_id_)) + sizeof(offset_));
  // @@protoc_insertion_point(copy_constructor:chunkserver.WriteSliceReq)
}

void WriteSliceReq::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&slice_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offset_) -
      reinterpret_cast<char*>(&slice_id_)) + sizeof(offset_));
}

WriteSliceReq::~WriteSliceReq() {
  // @@protoc_insertion_point(destructor:chunkserver.WriteSliceReq)
  SharedDtor();
}

void WriteSliceReq::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void WriteSliceReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* WriteSliceReq::descriptor() {
  ::protobuf_chunkserver_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chunkserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WriteSliceReq& WriteSliceReq::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_chunkserver_2eproto::scc_info_WriteSliceReq.base);
  return *internal_default_instance();
}


void WriteSliceReq::Clear() {
// @@protoc_insertion_point(message_clear_start:chunkserver.WriteSliceReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&slice_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offset_) -
      reinterpret_cast<char*>(&slice_id_)) + sizeof(offset_));
  _internal_metadata_.Clear();
}

bool WriteSliceReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chunkserver.WriteSliceReq)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 slice_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &slice_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 offset = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chunkserver.WriteSliceReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chunkserver.WriteSliceReq)
  return false;
#undef DO_
}

void WriteSliceReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chunkserver.WriteSliceReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 slice_id = 1;
  if (this->slice_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->slice_id(), output);
  }

  // uint32 offset = 2;
  if (this->offset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->offset(), output);
  }

  // bytes data = 3;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->data(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:chunkserver.WriteSliceReq)
}

::google::protobuf::uint8* WriteSliceReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chunkserver.WriteSliceReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 slice_id = 1;
  if (this->slice_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->slice_id(), target);
  }

  // uint32 offset = 2;
  if (this->offset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->offset(), target);
  }

  // bytes data = 3;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chunkserver.WriteSliceReq)
  return target;
}

size_t WriteSliceReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chunkserver.WriteSliceReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes data = 3;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // uint64 slice_id = 1;
  if (this->slice_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->slice_id());
  }

  // uint32 offset = 2;
  if (this->offset() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->offset());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WriteSliceReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chunkserver.WriteSliceReq)
  GOOGLE_DCHECK_NE(&from, this);
  const WriteSliceReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WriteSliceReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chunkserver.WriteSliceReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chunkserver.WriteSliceReq)
    MergeFrom(*source);
  }
}

void WriteSliceReq::MergeFrom(const WriteSliceReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chunkserver.WriteSliceReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.slice_id() != 0) {
    set_slice_id(from.slice_id());
  }
  if (from.offset() != 0) {
    set_offset(from.offset());
  }
}

void WriteSliceReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chunkserver.WriteSliceReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WriteSliceReq::CopyFrom(const WriteSliceReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chunkserver.WriteSliceReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteSliceReq::IsInitialized() const {
  return true;
}

void WriteSliceReq::Swap(WriteSliceReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WriteSliceReq::InternalSwap(WriteSliceReq* other) {
  using std::swap;
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(slice_id_, other->slice_id_);
  swap(offset_, other->offset_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata WriteSliceReq::GetMetadata() const {
  protobuf_chunkserver_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chunkserver_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void WriteSliceRsp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WriteSliceRsp::WriteSliceRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_chunkserver_2eproto::scc_info_WriteSliceRsp.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chunkserver.WriteSliceRsp)
}
WriteSliceRsp::WriteSliceRsp(const WriteSliceRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:chunkserver.WriteSliceRsp)
}

void WriteSliceRsp::SharedCtor() {
}

WriteSliceRsp::~WriteSliceRsp() {
  // @@protoc_insertion_point(destructor:chunkserver.WriteSliceRsp)
  SharedDtor();
}

void WriteSliceRsp::SharedDtor() {
}

void WriteSliceRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* WriteSliceRsp::descriptor() {
  ::protobuf_chunkserver_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chunkserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WriteSliceRsp& WriteSliceRsp::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_chunkserver_2eproto::scc_info_WriteSliceRsp.base);
  return *internal_default_instance();
}


void WriteSliceRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:chunkserver.WriteSliceRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool WriteSliceRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chunkserver.WriteSliceRsp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:chunkserver.WriteSliceRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chunkserver.WriteSliceRsp)
  return false;
#undef DO_
}

void WriteSliceRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chunkserver.WriteSliceRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:chunkserver.WriteSliceRsp)
}

::google::protobuf::uint8* WriteSliceRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chunkserver.WriteSliceRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chunkserver.WriteSliceRsp)
  return target;
}

size_t WriteSliceRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chunkserver.WriteSliceRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WriteSliceRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chunkserver.WriteSliceRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const WriteSliceRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WriteSliceRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chunkserver.WriteSliceRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chunkserver.WriteSliceRsp)
    MergeFrom(*source);
  }
}

void WriteSliceRsp::MergeFrom(const WriteSliceRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chunkserver.WriteSliceRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void WriteSliceRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chunkserver.WriteSliceRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WriteSliceRsp::CopyFrom(const WriteSliceRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chunkserver.WriteSliceRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteSliceRsp::IsInitialized() const {
  return true;
}

void WriteSliceRsp::Swap(WriteSliceRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WriteSliceRsp::InternalSwap(WriteSliceRsp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata WriteSliceRsp::GetMetadata() const {
  protobuf_chunkserver_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chunkserver_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace chunkserver
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chunkserver::SetChunkStateReq* Arena::CreateMaybeMessage< ::chunkserver::SetChunkStateReq >(Arena* arena) {
  return Arena::CreateInternal< ::chunkserver::SetChunkStateReq >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chunkserver::SetChunkStateRsp* Arena::CreateMaybeMessage< ::chunkserver::SetChunkStateRsp >(Arena* arena) {
  return Arena::CreateInternal< ::chunkserver::SetChunkStateRsp >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chunkserver::AllocateInodeReq* Arena::CreateMaybeMessage< ::chunkserver::AllocateInodeReq >(Arena* arena) {
  return Arena::CreateInternal< ::chunkserver::AllocateInodeReq >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chunkserver::AllocateInodeRsp* Arena::CreateMaybeMessage< ::chunkserver::AllocateInodeRsp >(Arena* arena) {
  return Arena::CreateInternal< ::chunkserver::AllocateInodeRsp >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chunkserver::ReadSliceReq* Arena::CreateMaybeMessage< ::chunkserver::ReadSliceReq >(Arena* arena) {
  return Arena::CreateInternal< ::chunkserver::ReadSliceReq >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chunkserver::ReadSliceRsp* Arena::CreateMaybeMessage< ::chunkserver::ReadSliceRsp >(Arena* arena) {
  return Arena::CreateInternal< ::chunkserver::ReadSliceRsp >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chunkserver::WriteSliceReq* Arena::CreateMaybeMessage< ::chunkserver::WriteSliceReq >(Arena* arena) {
  return Arena::CreateInternal< ::chunkserver::WriteSliceReq >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chunkserver::WriteSliceRsp* Arena::CreateMaybeMessage< ::chunkserver::WriteSliceRsp >(Arena* arena) {
  return Arena::CreateInternal< ::chunkserver::WriteSliceRsp >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
