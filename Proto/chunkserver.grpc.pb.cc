// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: chunkserver.proto

#include "chunkserver.pb.h"
#include "chunkserver.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace chunkserver {

static const char* ChunkServerService_method_names[] = {
  "/chunkserver.ChunkServerService/SetChunkState",
  "/chunkserver.ChunkServerService/AllocateInode",
  "/chunkserver.ChunkServerService/ReadSlice",
  "/chunkserver.ChunkServerService/WriteSlice",
  "/chunkserver.ChunkServerService/ManipulateReferenceCount",
};

std::unique_ptr< ChunkServerService::Stub> ChunkServerService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ChunkServerService::Stub> stub(new ChunkServerService::Stub(channel));
  return stub;
}

ChunkServerService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_SetChunkState_(ChunkServerService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AllocateInode_(ChunkServerService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ReadSlice_(ChunkServerService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_WriteSlice_(ChunkServerService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ManipulateReferenceCount_(ChunkServerService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ChunkServerService::Stub::SetChunkState(::grpc::ClientContext* context, const ::chunkserver::SetChunkStateReq& request, ::chunkserver::SetChunkStateRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetChunkState_, context, request, response);
}

void ChunkServerService::Stub::experimental_async::SetChunkState(::grpc::ClientContext* context, const ::chunkserver::SetChunkStateReq* request, ::chunkserver::SetChunkStateRsp* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetChunkState_, context, request, response, std::move(f));
}

void ChunkServerService::Stub::experimental_async::SetChunkState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::chunkserver::SetChunkStateRsp* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetChunkState_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::chunkserver::SetChunkStateRsp>* ChunkServerService::Stub::AsyncSetChunkStateRaw(::grpc::ClientContext* context, const ::chunkserver::SetChunkStateReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::chunkserver::SetChunkStateRsp>::Create(channel_.get(), cq, rpcmethod_SetChunkState_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::chunkserver::SetChunkStateRsp>* ChunkServerService::Stub::PrepareAsyncSetChunkStateRaw(::grpc::ClientContext* context, const ::chunkserver::SetChunkStateReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::chunkserver::SetChunkStateRsp>::Create(channel_.get(), cq, rpcmethod_SetChunkState_, context, request, false);
}

::grpc::Status ChunkServerService::Stub::AllocateInode(::grpc::ClientContext* context, const ::chunkserver::AllocateInodeReq& request, ::chunkserver::AllocateInodeRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AllocateInode_, context, request, response);
}

void ChunkServerService::Stub::experimental_async::AllocateInode(::grpc::ClientContext* context, const ::chunkserver::AllocateInodeReq* request, ::chunkserver::AllocateInodeRsp* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AllocateInode_, context, request, response, std::move(f));
}

void ChunkServerService::Stub::experimental_async::AllocateInode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::chunkserver::AllocateInodeRsp* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AllocateInode_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::chunkserver::AllocateInodeRsp>* ChunkServerService::Stub::AsyncAllocateInodeRaw(::grpc::ClientContext* context, const ::chunkserver::AllocateInodeReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::chunkserver::AllocateInodeRsp>::Create(channel_.get(), cq, rpcmethod_AllocateInode_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::chunkserver::AllocateInodeRsp>* ChunkServerService::Stub::PrepareAsyncAllocateInodeRaw(::grpc::ClientContext* context, const ::chunkserver::AllocateInodeReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::chunkserver::AllocateInodeRsp>::Create(channel_.get(), cq, rpcmethod_AllocateInode_, context, request, false);
}

::grpc::Status ChunkServerService::Stub::ReadSlice(::grpc::ClientContext* context, const ::chunkserver::ReadSliceReq& request, ::chunkserver::ReadSliceRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ReadSlice_, context, request, response);
}

void ChunkServerService::Stub::experimental_async::ReadSlice(::grpc::ClientContext* context, const ::chunkserver::ReadSliceReq* request, ::chunkserver::ReadSliceRsp* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ReadSlice_, context, request, response, std::move(f));
}

void ChunkServerService::Stub::experimental_async::ReadSlice(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::chunkserver::ReadSliceRsp* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ReadSlice_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::chunkserver::ReadSliceRsp>* ChunkServerService::Stub::AsyncReadSliceRaw(::grpc::ClientContext* context, const ::chunkserver::ReadSliceReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::chunkserver::ReadSliceRsp>::Create(channel_.get(), cq, rpcmethod_ReadSlice_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::chunkserver::ReadSliceRsp>* ChunkServerService::Stub::PrepareAsyncReadSliceRaw(::grpc::ClientContext* context, const ::chunkserver::ReadSliceReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::chunkserver::ReadSliceRsp>::Create(channel_.get(), cq, rpcmethod_ReadSlice_, context, request, false);
}

::grpc::Status ChunkServerService::Stub::WriteSlice(::grpc::ClientContext* context, const ::chunkserver::WriteSliceReq& request, ::chunkserver::WriteSliceRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_WriteSlice_, context, request, response);
}

void ChunkServerService::Stub::experimental_async::WriteSlice(::grpc::ClientContext* context, const ::chunkserver::WriteSliceReq* request, ::chunkserver::WriteSliceRsp* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_WriteSlice_, context, request, response, std::move(f));
}

void ChunkServerService::Stub::experimental_async::WriteSlice(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::chunkserver::WriteSliceRsp* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_WriteSlice_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::chunkserver::WriteSliceRsp>* ChunkServerService::Stub::AsyncWriteSliceRaw(::grpc::ClientContext* context, const ::chunkserver::WriteSliceReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::chunkserver::WriteSliceRsp>::Create(channel_.get(), cq, rpcmethod_WriteSlice_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::chunkserver::WriteSliceRsp>* ChunkServerService::Stub::PrepareAsyncWriteSliceRaw(::grpc::ClientContext* context, const ::chunkserver::WriteSliceReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::chunkserver::WriteSliceRsp>::Create(channel_.get(), cq, rpcmethod_WriteSlice_, context, request, false);
}

::grpc::Status ChunkServerService::Stub::ManipulateReferenceCount(::grpc::ClientContext* context, const ::chunkserver::ManipulateReferenceCountReq& request, ::chunkserver::ManipulateReferenceCountRsp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ManipulateReferenceCount_, context, request, response);
}

void ChunkServerService::Stub::experimental_async::ManipulateReferenceCount(::grpc::ClientContext* context, const ::chunkserver::ManipulateReferenceCountReq* request, ::chunkserver::ManipulateReferenceCountRsp* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ManipulateReferenceCount_, context, request, response, std::move(f));
}

void ChunkServerService::Stub::experimental_async::ManipulateReferenceCount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::chunkserver::ManipulateReferenceCountRsp* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ManipulateReferenceCount_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::chunkserver::ManipulateReferenceCountRsp>* ChunkServerService::Stub::AsyncManipulateReferenceCountRaw(::grpc::ClientContext* context, const ::chunkserver::ManipulateReferenceCountReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::chunkserver::ManipulateReferenceCountRsp>::Create(channel_.get(), cq, rpcmethod_ManipulateReferenceCount_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::chunkserver::ManipulateReferenceCountRsp>* ChunkServerService::Stub::PrepareAsyncManipulateReferenceCountRaw(::grpc::ClientContext* context, const ::chunkserver::ManipulateReferenceCountReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::chunkserver::ManipulateReferenceCountRsp>::Create(channel_.get(), cq, rpcmethod_ManipulateReferenceCount_, context, request, false);
}

ChunkServerService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChunkServerService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ChunkServerService::Service, ::chunkserver::SetChunkStateReq, ::chunkserver::SetChunkStateRsp>(
          std::mem_fn(&ChunkServerService::Service::SetChunkState), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChunkServerService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ChunkServerService::Service, ::chunkserver::AllocateInodeReq, ::chunkserver::AllocateInodeRsp>(
          std::mem_fn(&ChunkServerService::Service::AllocateInode), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChunkServerService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ChunkServerService::Service, ::chunkserver::ReadSliceReq, ::chunkserver::ReadSliceRsp>(
          std::mem_fn(&ChunkServerService::Service::ReadSlice), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChunkServerService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ChunkServerService::Service, ::chunkserver::WriteSliceReq, ::chunkserver::WriteSliceRsp>(
          std::mem_fn(&ChunkServerService::Service::WriteSlice), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChunkServerService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ChunkServerService::Service, ::chunkserver::ManipulateReferenceCountReq, ::chunkserver::ManipulateReferenceCountRsp>(
          std::mem_fn(&ChunkServerService::Service::ManipulateReferenceCount), this)));
}

ChunkServerService::Service::~Service() {
}

::grpc::Status ChunkServerService::Service::SetChunkState(::grpc::ServerContext* context, const ::chunkserver::SetChunkStateReq* request, ::chunkserver::SetChunkStateRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ChunkServerService::Service::AllocateInode(::grpc::ServerContext* context, const ::chunkserver::AllocateInodeReq* request, ::chunkserver::AllocateInodeRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ChunkServerService::Service::ReadSlice(::grpc::ServerContext* context, const ::chunkserver::ReadSliceReq* request, ::chunkserver::ReadSliceRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ChunkServerService::Service::WriteSlice(::grpc::ServerContext* context, const ::chunkserver::WriteSliceReq* request, ::chunkserver::WriteSliceRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ChunkServerService::Service::ManipulateReferenceCount(::grpc::ServerContext* context, const ::chunkserver::ManipulateReferenceCountReq* request, ::chunkserver::ManipulateReferenceCountRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace chunkserver

