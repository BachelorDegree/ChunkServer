// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: chunkserver.proto
#ifndef GRPC_chunkserver_2eproto__INCLUDED
#define GRPC_chunkserver_2eproto__INCLUDED

#include "chunkserver.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace chunkserver {

class ChunkServerService final {
 public:
  static constexpr char const* service_full_name() {
    return "chunkserver.ChunkServerService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // rpc  (Req) returns (Rsp);
    virtual ::grpc::Status SetChunkState(::grpc::ClientContext* context, const ::chunkserver::SetChunkStateReq& request, ::chunkserver::SetChunkStateRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chunkserver::SetChunkStateRsp>> AsyncSetChunkState(::grpc::ClientContext* context, const ::chunkserver::SetChunkStateReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chunkserver::SetChunkStateRsp>>(AsyncSetChunkStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chunkserver::SetChunkStateRsp>> PrepareAsyncSetChunkState(::grpc::ClientContext* context, const ::chunkserver::SetChunkStateReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chunkserver::SetChunkStateRsp>>(PrepareAsyncSetChunkStateRaw(context, request, cq));
    }
    virtual ::grpc::Status AllocateInode(::grpc::ClientContext* context, const ::chunkserver::AllocateInodeReq& request, ::chunkserver::AllocateInodeRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chunkserver::AllocateInodeRsp>> AsyncAllocateInode(::grpc::ClientContext* context, const ::chunkserver::AllocateInodeReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chunkserver::AllocateInodeRsp>>(AsyncAllocateInodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chunkserver::AllocateInodeRsp>> PrepareAsyncAllocateInode(::grpc::ClientContext* context, const ::chunkserver::AllocateInodeReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chunkserver::AllocateInodeRsp>>(PrepareAsyncAllocateInodeRaw(context, request, cq));
    }
    virtual ::grpc::Status ReadSlice(::grpc::ClientContext* context, const ::chunkserver::ReadSliceReq& request, ::chunkserver::ReadSliceRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chunkserver::ReadSliceRsp>> AsyncReadSlice(::grpc::ClientContext* context, const ::chunkserver::ReadSliceReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chunkserver::ReadSliceRsp>>(AsyncReadSliceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chunkserver::ReadSliceRsp>> PrepareAsyncReadSlice(::grpc::ClientContext* context, const ::chunkserver::ReadSliceReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chunkserver::ReadSliceRsp>>(PrepareAsyncReadSliceRaw(context, request, cq));
    }
    virtual ::grpc::Status WriteSlice(::grpc::ClientContext* context, const ::chunkserver::WriteSliceReq& request, ::chunkserver::WriteSliceRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chunkserver::WriteSliceRsp>> AsyncWriteSlice(::grpc::ClientContext* context, const ::chunkserver::WriteSliceReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chunkserver::WriteSliceRsp>>(AsyncWriteSliceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chunkserver::WriteSliceRsp>> PrepareAsyncWriteSlice(::grpc::ClientContext* context, const ::chunkserver::WriteSliceReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chunkserver::WriteSliceRsp>>(PrepareAsyncWriteSliceRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // rpc  (Req) returns (Rsp);
      virtual void SetChunkState(::grpc::ClientContext* context, const ::chunkserver::SetChunkStateReq* request, ::chunkserver::SetChunkStateRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetChunkState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::chunkserver::SetChunkStateRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AllocateInode(::grpc::ClientContext* context, const ::chunkserver::AllocateInodeReq* request, ::chunkserver::AllocateInodeRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AllocateInode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::chunkserver::AllocateInodeRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ReadSlice(::grpc::ClientContext* context, const ::chunkserver::ReadSliceReq* request, ::chunkserver::ReadSliceRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ReadSlice(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::chunkserver::ReadSliceRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void WriteSlice(::grpc::ClientContext* context, const ::chunkserver::WriteSliceReq* request, ::chunkserver::WriteSliceRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void WriteSlice(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::chunkserver::WriteSliceRsp* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::chunkserver::SetChunkStateRsp>* AsyncSetChunkStateRaw(::grpc::ClientContext* context, const ::chunkserver::SetChunkStateReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::chunkserver::SetChunkStateRsp>* PrepareAsyncSetChunkStateRaw(::grpc::ClientContext* context, const ::chunkserver::SetChunkStateReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::chunkserver::AllocateInodeRsp>* AsyncAllocateInodeRaw(::grpc::ClientContext* context, const ::chunkserver::AllocateInodeReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::chunkserver::AllocateInodeRsp>* PrepareAsyncAllocateInodeRaw(::grpc::ClientContext* context, const ::chunkserver::AllocateInodeReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::chunkserver::ReadSliceRsp>* AsyncReadSliceRaw(::grpc::ClientContext* context, const ::chunkserver::ReadSliceReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::chunkserver::ReadSliceRsp>* PrepareAsyncReadSliceRaw(::grpc::ClientContext* context, const ::chunkserver::ReadSliceReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::chunkserver::WriteSliceRsp>* AsyncWriteSliceRaw(::grpc::ClientContext* context, const ::chunkserver::WriteSliceReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::chunkserver::WriteSliceRsp>* PrepareAsyncWriteSliceRaw(::grpc::ClientContext* context, const ::chunkserver::WriteSliceReq& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status SetChunkState(::grpc::ClientContext* context, const ::chunkserver::SetChunkStateReq& request, ::chunkserver::SetChunkStateRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chunkserver::SetChunkStateRsp>> AsyncSetChunkState(::grpc::ClientContext* context, const ::chunkserver::SetChunkStateReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chunkserver::SetChunkStateRsp>>(AsyncSetChunkStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chunkserver::SetChunkStateRsp>> PrepareAsyncSetChunkState(::grpc::ClientContext* context, const ::chunkserver::SetChunkStateReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chunkserver::SetChunkStateRsp>>(PrepareAsyncSetChunkStateRaw(context, request, cq));
    }
    ::grpc::Status AllocateInode(::grpc::ClientContext* context, const ::chunkserver::AllocateInodeReq& request, ::chunkserver::AllocateInodeRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chunkserver::AllocateInodeRsp>> AsyncAllocateInode(::grpc::ClientContext* context, const ::chunkserver::AllocateInodeReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chunkserver::AllocateInodeRsp>>(AsyncAllocateInodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chunkserver::AllocateInodeRsp>> PrepareAsyncAllocateInode(::grpc::ClientContext* context, const ::chunkserver::AllocateInodeReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chunkserver::AllocateInodeRsp>>(PrepareAsyncAllocateInodeRaw(context, request, cq));
    }
    ::grpc::Status ReadSlice(::grpc::ClientContext* context, const ::chunkserver::ReadSliceReq& request, ::chunkserver::ReadSliceRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chunkserver::ReadSliceRsp>> AsyncReadSlice(::grpc::ClientContext* context, const ::chunkserver::ReadSliceReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chunkserver::ReadSliceRsp>>(AsyncReadSliceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chunkserver::ReadSliceRsp>> PrepareAsyncReadSlice(::grpc::ClientContext* context, const ::chunkserver::ReadSliceReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chunkserver::ReadSliceRsp>>(PrepareAsyncReadSliceRaw(context, request, cq));
    }
    ::grpc::Status WriteSlice(::grpc::ClientContext* context, const ::chunkserver::WriteSliceReq& request, ::chunkserver::WriteSliceRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chunkserver::WriteSliceRsp>> AsyncWriteSlice(::grpc::ClientContext* context, const ::chunkserver::WriteSliceReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chunkserver::WriteSliceRsp>>(AsyncWriteSliceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chunkserver::WriteSliceRsp>> PrepareAsyncWriteSlice(::grpc::ClientContext* context, const ::chunkserver::WriteSliceReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chunkserver::WriteSliceRsp>>(PrepareAsyncWriteSliceRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void SetChunkState(::grpc::ClientContext* context, const ::chunkserver::SetChunkStateReq* request, ::chunkserver::SetChunkStateRsp* response, std::function<void(::grpc::Status)>) override;
      void SetChunkState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::chunkserver::SetChunkStateRsp* response, std::function<void(::grpc::Status)>) override;
      void AllocateInode(::grpc::ClientContext* context, const ::chunkserver::AllocateInodeReq* request, ::chunkserver::AllocateInodeRsp* response, std::function<void(::grpc::Status)>) override;
      void AllocateInode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::chunkserver::AllocateInodeRsp* response, std::function<void(::grpc::Status)>) override;
      void ReadSlice(::grpc::ClientContext* context, const ::chunkserver::ReadSliceReq* request, ::chunkserver::ReadSliceRsp* response, std::function<void(::grpc::Status)>) override;
      void ReadSlice(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::chunkserver::ReadSliceRsp* response, std::function<void(::grpc::Status)>) override;
      void WriteSlice(::grpc::ClientContext* context, const ::chunkserver::WriteSliceReq* request, ::chunkserver::WriteSliceRsp* response, std::function<void(::grpc::Status)>) override;
      void WriteSlice(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::chunkserver::WriteSliceRsp* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::chunkserver::SetChunkStateRsp>* AsyncSetChunkStateRaw(::grpc::ClientContext* context, const ::chunkserver::SetChunkStateReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::chunkserver::SetChunkStateRsp>* PrepareAsyncSetChunkStateRaw(::grpc::ClientContext* context, const ::chunkserver::SetChunkStateReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::chunkserver::AllocateInodeRsp>* AsyncAllocateInodeRaw(::grpc::ClientContext* context, const ::chunkserver::AllocateInodeReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::chunkserver::AllocateInodeRsp>* PrepareAsyncAllocateInodeRaw(::grpc::ClientContext* context, const ::chunkserver::AllocateInodeReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::chunkserver::ReadSliceRsp>* AsyncReadSliceRaw(::grpc::ClientContext* context, const ::chunkserver::ReadSliceReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::chunkserver::ReadSliceRsp>* PrepareAsyncReadSliceRaw(::grpc::ClientContext* context, const ::chunkserver::ReadSliceReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::chunkserver::WriteSliceRsp>* AsyncWriteSliceRaw(::grpc::ClientContext* context, const ::chunkserver::WriteSliceReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::chunkserver::WriteSliceRsp>* PrepareAsyncWriteSliceRaw(::grpc::ClientContext* context, const ::chunkserver::WriteSliceReq& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SetChunkState_;
    const ::grpc::internal::RpcMethod rpcmethod_AllocateInode_;
    const ::grpc::internal::RpcMethod rpcmethod_ReadSlice_;
    const ::grpc::internal::RpcMethod rpcmethod_WriteSlice_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // rpc  (Req) returns (Rsp);
    virtual ::grpc::Status SetChunkState(::grpc::ServerContext* context, const ::chunkserver::SetChunkStateReq* request, ::chunkserver::SetChunkStateRsp* response);
    virtual ::grpc::Status AllocateInode(::grpc::ServerContext* context, const ::chunkserver::AllocateInodeReq* request, ::chunkserver::AllocateInodeRsp* response);
    virtual ::grpc::Status ReadSlice(::grpc::ServerContext* context, const ::chunkserver::ReadSliceReq* request, ::chunkserver::ReadSliceRsp* response);
    virtual ::grpc::Status WriteSlice(::grpc::ServerContext* context, const ::chunkserver::WriteSliceReq* request, ::chunkserver::WriteSliceRsp* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_SetChunkState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SetChunkState() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SetChunkState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetChunkState(::grpc::ServerContext* context, const ::chunkserver::SetChunkStateReq* request, ::chunkserver::SetChunkStateRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetChunkState(::grpc::ServerContext* context, ::chunkserver::SetChunkStateReq* request, ::grpc::ServerAsyncResponseWriter< ::chunkserver::SetChunkStateRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AllocateInode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_AllocateInode() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_AllocateInode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AllocateInode(::grpc::ServerContext* context, const ::chunkserver::AllocateInodeReq* request, ::chunkserver::AllocateInodeRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAllocateInode(::grpc::ServerContext* context, ::chunkserver::AllocateInodeReq* request, ::grpc::ServerAsyncResponseWriter< ::chunkserver::AllocateInodeRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReadSlice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ReadSlice() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_ReadSlice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadSlice(::grpc::ServerContext* context, const ::chunkserver::ReadSliceReq* request, ::chunkserver::ReadSliceRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReadSlice(::grpc::ServerContext* context, ::chunkserver::ReadSliceReq* request, ::grpc::ServerAsyncResponseWriter< ::chunkserver::ReadSliceRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_WriteSlice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_WriteSlice() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_WriteSlice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WriteSlice(::grpc::ServerContext* context, const ::chunkserver::WriteSliceReq* request, ::chunkserver::WriteSliceRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWriteSlice(::grpc::ServerContext* context, ::chunkserver::WriteSliceReq* request, ::grpc::ServerAsyncResponseWriter< ::chunkserver::WriteSliceRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SetChunkState<WithAsyncMethod_AllocateInode<WithAsyncMethod_ReadSlice<WithAsyncMethod_WriteSlice<Service > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetChunkState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_SetChunkState() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::chunkserver::SetChunkStateReq, ::chunkserver::SetChunkStateRsp>(
          [this](::grpc::ServerContext* context,
                 const ::chunkserver::SetChunkStateReq* request,
                 ::chunkserver::SetChunkStateRsp* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->SetChunkState(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_SetChunkState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetChunkState(::grpc::ServerContext* context, const ::chunkserver::SetChunkStateReq* request, ::chunkserver::SetChunkStateRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SetChunkState(::grpc::ServerContext* context, const ::chunkserver::SetChunkStateReq* request, ::chunkserver::SetChunkStateRsp* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_AllocateInode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_AllocateInode() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::chunkserver::AllocateInodeReq, ::chunkserver::AllocateInodeRsp>(
          [this](::grpc::ServerContext* context,
                 const ::chunkserver::AllocateInodeReq* request,
                 ::chunkserver::AllocateInodeRsp* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->AllocateInode(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_AllocateInode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AllocateInode(::grpc::ServerContext* context, const ::chunkserver::AllocateInodeReq* request, ::chunkserver::AllocateInodeRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void AllocateInode(::grpc::ServerContext* context, const ::chunkserver::AllocateInodeReq* request, ::chunkserver::AllocateInodeRsp* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ReadSlice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_ReadSlice() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::chunkserver::ReadSliceReq, ::chunkserver::ReadSliceRsp>(
          [this](::grpc::ServerContext* context,
                 const ::chunkserver::ReadSliceReq* request,
                 ::chunkserver::ReadSliceRsp* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->ReadSlice(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_ReadSlice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadSlice(::grpc::ServerContext* context, const ::chunkserver::ReadSliceReq* request, ::chunkserver::ReadSliceRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ReadSlice(::grpc::ServerContext* context, const ::chunkserver::ReadSliceReq* request, ::chunkserver::ReadSliceRsp* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_WriteSlice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_WriteSlice() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::chunkserver::WriteSliceReq, ::chunkserver::WriteSliceRsp>(
          [this](::grpc::ServerContext* context,
                 const ::chunkserver::WriteSliceReq* request,
                 ::chunkserver::WriteSliceRsp* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->WriteSlice(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_WriteSlice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WriteSlice(::grpc::ServerContext* context, const ::chunkserver::WriteSliceReq* request, ::chunkserver::WriteSliceRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void WriteSlice(::grpc::ServerContext* context, const ::chunkserver::WriteSliceReq* request, ::chunkserver::WriteSliceRsp* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_SetChunkState<ExperimentalWithCallbackMethod_AllocateInode<ExperimentalWithCallbackMethod_ReadSlice<ExperimentalWithCallbackMethod_WriteSlice<Service > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_SetChunkState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SetChunkState() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SetChunkState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetChunkState(::grpc::ServerContext* context, const ::chunkserver::SetChunkStateReq* request, ::chunkserver::SetChunkStateRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AllocateInode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_AllocateInode() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_AllocateInode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AllocateInode(::grpc::ServerContext* context, const ::chunkserver::AllocateInodeReq* request, ::chunkserver::AllocateInodeRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReadSlice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ReadSlice() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_ReadSlice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadSlice(::grpc::ServerContext* context, const ::chunkserver::ReadSliceReq* request, ::chunkserver::ReadSliceRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_WriteSlice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_WriteSlice() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_WriteSlice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WriteSlice(::grpc::ServerContext* context, const ::chunkserver::WriteSliceReq* request, ::chunkserver::WriteSliceRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetChunkState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SetChunkState() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SetChunkState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetChunkState(::grpc::ServerContext* context, const ::chunkserver::SetChunkStateReq* request, ::chunkserver::SetChunkStateRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetChunkState(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AllocateInode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_AllocateInode() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_AllocateInode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AllocateInode(::grpc::ServerContext* context, const ::chunkserver::AllocateInodeReq* request, ::chunkserver::AllocateInodeRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAllocateInode(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReadSlice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_ReadSlice() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_ReadSlice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadSlice(::grpc::ServerContext* context, const ::chunkserver::ReadSliceReq* request, ::chunkserver::ReadSliceRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReadSlice(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_WriteSlice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_WriteSlice() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_WriteSlice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WriteSlice(::grpc::ServerContext* context, const ::chunkserver::WriteSliceReq* request, ::chunkserver::WriteSliceRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWriteSlice(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetChunkState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_SetChunkState() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->SetChunkState(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_SetChunkState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetChunkState(::grpc::ServerContext* context, const ::chunkserver::SetChunkStateReq* request, ::chunkserver::SetChunkStateRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SetChunkState(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_AllocateInode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_AllocateInode() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->AllocateInode(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_AllocateInode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AllocateInode(::grpc::ServerContext* context, const ::chunkserver::AllocateInodeReq* request, ::chunkserver::AllocateInodeRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void AllocateInode(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ReadSlice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_ReadSlice() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->ReadSlice(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_ReadSlice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadSlice(::grpc::ServerContext* context, const ::chunkserver::ReadSliceReq* request, ::chunkserver::ReadSliceRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ReadSlice(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_WriteSlice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_WriteSlice() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->WriteSlice(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_WriteSlice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WriteSlice(::grpc::ServerContext* context, const ::chunkserver::WriteSliceReq* request, ::chunkserver::WriteSliceRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void WriteSlice(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetChunkState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SetChunkState() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::chunkserver::SetChunkStateReq, ::chunkserver::SetChunkStateRsp>(std::bind(&WithStreamedUnaryMethod_SetChunkState<BaseClass>::StreamedSetChunkState, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SetChunkState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetChunkState(::grpc::ServerContext* context, const ::chunkserver::SetChunkStateReq* request, ::chunkserver::SetChunkStateRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetChunkState(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::chunkserver::SetChunkStateReq,::chunkserver::SetChunkStateRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AllocateInode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_AllocateInode() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::chunkserver::AllocateInodeReq, ::chunkserver::AllocateInodeRsp>(std::bind(&WithStreamedUnaryMethod_AllocateInode<BaseClass>::StreamedAllocateInode, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_AllocateInode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AllocateInode(::grpc::ServerContext* context, const ::chunkserver::AllocateInodeReq* request, ::chunkserver::AllocateInodeRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAllocateInode(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::chunkserver::AllocateInodeReq,::chunkserver::AllocateInodeRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReadSlice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ReadSlice() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::chunkserver::ReadSliceReq, ::chunkserver::ReadSliceRsp>(std::bind(&WithStreamedUnaryMethod_ReadSlice<BaseClass>::StreamedReadSlice, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ReadSlice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReadSlice(::grpc::ServerContext* context, const ::chunkserver::ReadSliceReq* request, ::chunkserver::ReadSliceRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReadSlice(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::chunkserver::ReadSliceReq,::chunkserver::ReadSliceRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_WriteSlice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_WriteSlice() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::chunkserver::WriteSliceReq, ::chunkserver::WriteSliceRsp>(std::bind(&WithStreamedUnaryMethod_WriteSlice<BaseClass>::StreamedWriteSlice, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_WriteSlice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status WriteSlice(::grpc::ServerContext* context, const ::chunkserver::WriteSliceReq* request, ::chunkserver::WriteSliceRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedWriteSlice(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::chunkserver::WriteSliceReq,::chunkserver::WriteSliceRsp>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SetChunkState<WithStreamedUnaryMethod_AllocateInode<WithStreamedUnaryMethod_ReadSlice<WithStreamedUnaryMethod_WriteSlice<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_SetChunkState<WithStreamedUnaryMethod_AllocateInode<WithStreamedUnaryMethod_ReadSlice<WithStreamedUnaryMethod_WriteSlice<Service > > > > StreamedService;
};

}  // namespace chunkserver


#endif  // GRPC_chunkserver_2eproto__INCLUDED
